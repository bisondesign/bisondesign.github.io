<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Bison Design</title>
    <link>http://bisondesign.net/index.xml</link>
    <description>Recent content on Bison Design</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>All rights reserved - 2017</copyright>
    <lastBuildDate>Sat, 07 Apr 2018 20:21:11 -0500</lastBuildDate>
    <atom:link href="http://bisondesign.net/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Use-case Driven API Design (part 1)</title>
      <link>http://bisondesign.net/post/use-case-driven-design-1/</link>
      <pubDate>Sat, 07 Apr 2018 20:21:11 -0500</pubDate>
      
      <guid>http://bisondesign.net/post/use-case-driven-design-1/</guid>
      <description>

&lt;h3 id=&#34;preface&#34;&gt;Preface&lt;/h3&gt;

&lt;p&gt;Rarely does one get entertained by reading software manuals, though Knuth&amp;rsquo;s
&lt;a href=&#34;https://www.amazon.com/TeXbook-Donald-Knuth/dp/0201134489&#34;&gt;The TeXbook&lt;/a&gt; is one notable exception. Rarer still is getting pleasure from
reading &lt;em&gt;guidelines&lt;/em&gt; for writing software. Imagine my surprise when I found
myself reading and actually liking &lt;a href=&#34;https://www.amazon.com/Framework-Design-Guidelines-Conventions-Libraries/dp/0321545613&#34;&gt;Framework Design Guidelines: Conventions,
Idioms, and Patterns for Reusable .NET Libraries&lt;/a&gt; by Cwalina and Abrams. The
book was seriously fun and educational at the same time. It was hard to put
down. One of the general lessons drilled into me from that book was the need to
paper test an API. The authors stressed the need for an API to be usable by
design, not by accident. And design takes hard work.&lt;/p&gt;

&lt;p&gt;This is my first post is about API design - a mysterious mixture of art and
science - about which I am passionate. Inspired by such great authors, my goal
for you, dear reader, is that you find this post fun and educational. If not,
at least I can promise that the pain will be short-lived.&lt;/p&gt;

&lt;h3 id=&#34;why-a-published-api-needs-design&#34;&gt;Why a published API needs design&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;Design thinking&lt;/em&gt; is the name given to the movement that is bringing usability
and visual design into the earliest stages of a products life-cycle. It applies
to electronics, web sites, software, and any product that requires human
interaction. It&amp;rsquo;s methodology includes a deep understanding of the user, the
problem being solved, and the solution space. It encourages ideation (making a
lot of crazy ideas for solutions), mixing and matching ideas, and
experimentation. It is a lot like brainstorming in that regard.&lt;/p&gt;

&lt;p&gt;Well, an API is a product that requires human interaction as well. The &amp;lsquo;P&amp;rsquo; in
API stands for &amp;lsquo;programming&amp;rsquo;, and at least for the present most of the
programmers I know are human. Some day if we eliminate programmers we can
shorten API to AI.&lt;/p&gt;

&lt;p&gt;Why should an API design require any less thought than a visual UI? The target
audience (we programmers) can&amp;rsquo;t be assumed to have any more domain knowledge
than the user of the UI, and in fact we likely have less. As a profession we
fall back too easily on the assumption that programmers will know what to do.
We also assume that if the programmers make a mistake then QA will find the
bugs.&lt;/p&gt;

&lt;p&gt;Another strong argument for careful design is that an API has a long life and
if successful will be read many more times than it was written. You might have
100&amp;rsquo;s or 1000&amp;rsquo;s of programmers reading your API and trying to make sense out of
it. They will all trip over the same usability issues and find the different
workarounds. Time invested in making an API usable pays dividends over its
lifetime and can contribute to its success.&lt;/p&gt;

&lt;p&gt;This post specifically targets the design of the published APIs for business
objects. This is a subset of the more general area of API design. A published
API is intended to be consumed by 3rd parties (either within your enterprise or
outside of it). Thus the design of the API is more critical since it is hard to
change. It is also harder to explain. APIs for business objects tend to be
limited. Business objects have very rigid rules for mutation because the
business imposes many constraints and invariants on those objects. These
two factors influence the design of the API as will be seen below.&lt;/p&gt;

&lt;p&gt;So how do we go about making an API for a domain object as usable and
intuitive as possible, and what does this even mean? Read on!&lt;/p&gt;

&lt;h3 id=&#34;considerations-for-a-good-api-design&#34;&gt;Considerations for a Good API Design&lt;/h3&gt;

&lt;p&gt;An API is a projection of a model. If you have a service that your customers
want to use they likely have a model of that service in their minds: the type
of data it provides, what they want to do with and to that data, and so on. If
your service mimics a traditional process or service then your customers may
already have a model based on that in their minds.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Example.&lt;/strong&gt; &lt;a href=&#34;https://www.shutterfly.com/&#34;&gt;Shutterfly&lt;/a&gt; produces
and delivers printed photo albums from pictures you supply online. The model I
have in my mind when I use Shutterfly is based on my past experience of putting
pictures into an empty photo album I purchased in a department store. I want
the same flexibility in choosing the style of album, its dimensions, the number
of pages, laying out my pictures, adding captions, etc. Shutterfly builds on that
model in their UI and then extends it beyond the original, e.g. zooming in on a
picture or applying filters. I appreciate these improvements to the traditional
process. But the reason I find their site easy to use is because they use a
mental model I am already familiar with.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;A business API typically models data, not physical objects like photo albums.
But that does not mean we are off the hook when it comes to the model&amp;rsquo;s design.
For example, in an on-line library portal a user must first apply for an
account (aka library card). The process should be modeled on the paper forms
that a librarian gave you when you applied for your first a library card in a
local branch. (I hope you still have your library card.) Of course this form
differs from the form you filled out to get a driver&amp;rsquo;s license. While these
forms collect some of the same data they also collect data that is unique to
each application. A library does not require proof of insurance to issue a card
and the Department of Motor Vehicles does not care about your literary
interests. The nomenclature differs as well. To the library you are the
&lt;em&gt;borrower&lt;/em&gt; whereas to the DMV you are the &lt;em&gt;driver&lt;/em&gt;. One way of putting this is
to say that data has a &lt;em&gt;shape&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Choosing the right model does matter. It may make the difference between an
intuitive API and one that is clunky. If the model is not simple and natural
for the domain, it will be fighting for user mind-share with the &lt;em&gt;true model&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Once the model is chosen, the API must be designed to expose &lt;em&gt;commands&lt;/em&gt; and
&lt;em&gt;queries&lt;/em&gt; against that model. These will again depend on the domain, and they
&lt;a href=&#34;https://martinfowler.com/bliki/CommandQuerySeparation.html&#34;&gt;should be separate&lt;/a&gt;. While you may be able to change your address on-line
with the library application, the DMV will require you to bring proof of your
new address in person. At least here in Michigan they are not very trusting.
This API then becomes the &lt;em&gt;projection&lt;/em&gt; of the model. It is not the entire
model, but it is the part that external developers are allowed to see.&lt;/p&gt;

&lt;p&gt;I propose four considerations, my four &amp;lsquo;C&amp;rsquo;s for a good API design:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Complete&lt;/li&gt;
&lt;li&gt;Compact&lt;/li&gt;
&lt;li&gt;Consistent&lt;/li&gt;
&lt;li&gt;Clear (intuitive)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In the &lt;a href=&#34;../use-case-driven-design-2/&#34;&gt;second post&lt;/a&gt; of this series I will elaborate on each of these in turn.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Use-case Driven API Design (part 2)</title>
      <link>http://bisondesign.net/post/use-case-driven-design-2/</link>
      <pubDate>Sat, 07 Apr 2018 20:21:11 -0500</pubDate>
      
      <guid>http://bisondesign.net/post/use-case-driven-design-2/</guid>
      <description>

&lt;h3 id=&#34;preface&#34;&gt;Preface&lt;/h3&gt;

&lt;p&gt;In the &lt;a href=&#34;../use-case-driven-design-1/&#34;&gt;previous post&lt;/a&gt; I talked about the importance of good design when
making a published API. I ended by giving four &amp;lsquo;C&amp;rsquo;s of a good API: complete,
compact, consistent and clear. Here I elaborate on them one by one.&lt;/p&gt;

&lt;h4 id=&#34;complete&#34;&gt;Complete&lt;/h4&gt;

&lt;p&gt;An API design is complete if it allows customers to write client code that
supports all use cases allowed by the business. This is a dynamic situation.
With time the business may change their policy and allow new use cases against
the same domain objects. Or it may introduce new domain object types. In either
case a once complete API may suddenly become incomplete.&lt;/p&gt;

&lt;p&gt;It would be a mistake to anticipate the business and to allow clients to do
things that are not allowed by the business just in case it is allowed in the
future. This type of thinking can lead to vulnerabilities and loopholes. In the
worst case it can even lead to data corruption as business invariants may not
be protected. For this reason it is best to start with an agreed set of
business capabilities that can be developed into use cases and the API can be
designed to support those.&lt;/p&gt;

&lt;p&gt;Adding behavior or new types to a domain should not break existing client code.
Breaking changes, though rare, can happen and the smart architect is prepared
for these.  This can be demonstrated with a concrete example.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Example.&lt;/strong&gt; The Department of Motor Vehicles API may initially allow customers
to manage their home address information with public APIs, but later decide that
this business capability should no longer be supported. It would be much better
for this to appear as a deprecation of an API rather than a reduction in the
scope of a much broader API.&lt;/p&gt;

&lt;p&gt;Now if the initial design had allowed the client code to supply a new customer
info object (&lt;code&gt;UpdateDriverInfo&lt;/code&gt; which included the customer&amp;rsquo;s address), this
API would end up being clunky after the business change. The implementation
would require new business logic (did the address change?) and failure modes.
These changes would trigger changes to the documentation as well. While any
breaking change is hard on client developers, adding failure modes to an
existing API is worse since it entails extra work on the part of the client.&lt;/p&gt;

&lt;p&gt;A much better initial design would be an API that changed only the customer
address (&lt;code&gt;UpdateDriverAddress&lt;/code&gt;) as this could simply be deprecated in one
release and eliminated in another. It would also be easier for client
developers to see the effects of the deprecation.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;You may be wondering if the logical continuation of this reasoning is to have
separate APIs for the customer&amp;rsquo;s street address, city, zip code, etc. Your
intuition will tell you that this is wrong, but there is also a solid principle
against such granularity. Go back to the business and ask them: would you ever
allow the customer to change their city without changing the rest of their
address? They will tell you that the likelihood of a customer moving from one
city to another but keeping the same street address is so small that it is
effectively zero. Some things tend to change together and can be treated as a
single &amp;ldquo;value&amp;rdquo;. This also leads to a more compact set of APIs, which leads to
our second consideration for good API design.&lt;/p&gt;

&lt;h4 id=&#34;compact&#34;&gt;Compact&lt;/h4&gt;

&lt;p&gt;There are two divergent schools of thought regarding the design of an API. A
&lt;strong&gt;humane interface&lt;/strong&gt; provides many convenience methods. It leads to shorter
client code and a more fluid program structure. A &lt;strong&gt;minimal interface&lt;/strong&gt; is just
as complete but with a minimum of redundancy. Client code has one clear
approach that tends to be longer.&lt;/p&gt;

&lt;p&gt;When designing a published API, it is good to keep in mind that changes are
very risky once the API is published. A client may be using the API and
removing it may cause the client code to break. As a result, API methods are
often deprecated and not removed (Java 9 removed APIs that had been
deprecated since Java 2 and the repercussions will last almost as long). For
this reason it is better to design a &lt;em&gt;minimal interface&lt;/em&gt; and set a very high
bar for adding convenience methods in future releases.&lt;/p&gt;

&lt;p&gt;In reality risk mitigation through compactness is advice squarely aimed at
framework and library API sets where business constraints are non-existent or
negligible (the business has no business changing the definition of a natural
logarithm). For business objects, whose API are primarily defined by business
needs and must preserve business invariants, compactness is not as high a
priority.&lt;/p&gt;

&lt;p&gt;Instead business domain APIs should be first factored along the lines drawn by
use cases which allow mutation. Business data that is needed to support command
use cases should be encapsulated within a sub-domain. Then within that
sub-domain compactness can play a secondary role in the design of the APIs.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Example.&lt;/strong&gt; In the library checkout service the business may decide that a
checkout is allowed only if&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;the borrower has less than \$10.00 in fines&lt;/li&gt;
&lt;li&gt;the borrower has fewer than 25 items out already&lt;/li&gt;
&lt;li&gt;a copy of the item is not already being held by the borrower&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;An analysis of the use cases would show that the fines are primarily managed by
another subdomain (library accounts). But the number and particulars of the
held items belong to the same service that manages checkout. So for this reason
a single API that returns the collection of all items held by a particular
borrower would be both compact and appropriate. The same subdomain would also
expose an API that allows a new item to be added the list (&lt;code&gt;BorrowItem&lt;/code&gt;).
Adding an item would be accomplished transactionally, so that two checkouts
done at the same time from different clients would not both succeed if they
would put that borrower over the 25 item limit or if they both attempted to add
the same item.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&#34;consistent&#34;&gt;Consistent&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Naming.&lt;/li&gt;
&lt;li&gt;Uniformity of behavior.&lt;/li&gt;
&lt;li&gt;Error handling.&lt;/li&gt;
&lt;li&gt;Event publishing.&lt;/li&gt;
&lt;li&gt;Documentation.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;clear-aka-intuitive&#34;&gt;Clear (aka Intuitive)&lt;/h4&gt;

&lt;p&gt;Closely related to paper testing.
Proportional to how close your solution is to the true model.
Warning not to overestimate your own intuition (confirmation bias).&lt;/p&gt;

&lt;h3 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;In the &lt;a href=&#34;../use-case-driven-design-3/&#34;&gt;third post&lt;/a&gt; in this series I will delve into the design process,
continuing to use the on-line library service example.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Use-case Driven API Design (part 3)</title>
      <link>http://bisondesign.net/post/use-case-driven-design-3/</link>
      <pubDate>Sat, 07 Apr 2018 20:21:11 -0500</pubDate>
      
      <guid>http://bisondesign.net/post/use-case-driven-design-3/</guid>
      <description>

&lt;h3 id=&#34;use-case-driven-api-design&#34;&gt;Use-case Driven API Design&lt;/h3&gt;

&lt;p&gt;In the &lt;a href=&#34;../use-case-driven-design-2/&#34;&gt;previous post&lt;/a&gt;, I discussed the qualities of a good public API
design. Knowing where we want to go does not automatically tell us how to get
there. Today I wanted to travel from Detroit to Chicago so I got in the car and
opened &lt;a href=&#34;https://www.google.com/maps/dir/Detroit,+Michigan/Chicago,+Illinois&#34;&gt;Google Maps&lt;/a&gt; on my phone. It told me exactly how to get where I
wanted to go. But before 1800 Chicago was much harder to find; there were no
roads, no maps, no directions. Often it feels that way when we embark on the
design of an API that does not yet exist. We are blazing a trail into new
territory. We know the end goal - a clear, complete, compact, consistent API -
and we can recognize it when we see it. But where do we start? We start from
the end of course!&lt;/p&gt;

&lt;p&gt;Requirements for an API must begin as a collection of tasks that the consumers
of the API will accomplish. These should be written down in the language of the
domain. If the person responsible for these requirements is not a subject
matter expert (SME) then please try hard to consult with one. Getting the
language right is crucial at this stage. The language will contain nouns and
verbs that should become part of the final API methods. If you are using
Domain Driven Design (DDD) these will also appear in the implementation.&lt;/p&gt;

&lt;h4 id=&#34;nomenclature-aka-ubiquitous-language&#34;&gt;Nomenclature (aka Ubiquitous Language)&lt;/h4&gt;

&lt;p&gt;Ubiquitous language is simply the language of a particular domain. Your API
should be built on that language. Your object domain model should only include
those domain concepts, the same ones understood and used by users and subject
matter experts. It should not contain concepts related to the technical
implementation of your computing solution.&lt;/p&gt;

&lt;p&gt;For example, a flight reservation model would include nouns like person,
passenger, reservation, scheduled flight, flight description, and airport. It
would also include verbs or verb phrases like add reservation, add passenger,
check space, add scheduled flight, and add airport.&lt;/p&gt;

&lt;p&gt;These terms should be well documented. It is important to understand that the
scope of a language can be fairly narrow. To an enterprise like a telephone
company the term telephone will mean different things in different contexts
(e.g. repair vs billing vs routing). Each domain will have its own dictionary.&lt;/p&gt;

&lt;h4 id=&#34;queries&#34;&gt;Queries&lt;/h4&gt;

&lt;p&gt;The term &amp;lsquo;command query separation&amp;rsquo; (or CQS) was coined by Bertrand Meyer in
his influential book &lt;a href=&#34;https://www.amazon.com/Object-Oriented-Software-Construction-Prentice-Hall-International&#34;&gt;Object-Oriented Software Construction&lt;/a&gt; It states that
every method should either be a command that performs an action, or a query
that returns data to the caller, but not both. Methods that return data should
have no observable side effects (except perhaps drowsiness).&lt;/p&gt;

&lt;p&gt;Adherence to CQS is not necessary for a good API design, but it is helpful to
keep these two types of API separate since they present different challenges to
scalability. For example, in a distributed system the results of queries can be
cached to improve performance at the cost of some staleness. On the other hand,
commands need special handling to avoid race conditions that might lead to data
corruption.&lt;/p&gt;

&lt;p&gt;When designing APIs it is first helpful to rule out &amp;ldquo;reports&amp;rdquo;. Like queries,
reports return data to the caller typically by getting some information from
many database tables and doing some joins. The business is usually pretty lax
about report requirements depending on how they are used. A report may be
generated only for compliance and archived. Or it may be used to look for
anomalies in a historical record of transactions. Typically reports span a
fixed period of time. Most importantly, reports rarely interact with the domain
model of the system, being generated instead from the data store. It is this
that allows us to ignore reports when designing an API for the domain.&lt;/p&gt;

&lt;p&gt;By contrast data that is presented to the user in a user interface is intended
for immediate action. It represents the current status of the domain and so it
must aspire to higher standards of &amp;ldquo;freshness&amp;rdquo;. Still, the business should be
willing to provide guidance on how stale a piece of data in the UI can be
allowed to get. Freshness is useful to include, along with the data in the UI,
some indication of the staleness of that data to inform the end user (e.g. &amp;ldquo;as
of 10:25:20 on 02/13/18&amp;rdquo; or &amp;ldquo;valid until 9am ET on 04/08/18&amp;rdquo;).&lt;/p&gt;

&lt;p&gt;The key design consideration for a query is that all the data in the result
should come from one subdomain. If the query must aggregate information from
other subdomains then it will be slow and inconsistent. This may lead to some
surprising results in the UI.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Example.&lt;/strong&gt; In the online library domain there are several use cases which are
pure queries.  These correspond to listing or giving detailed information for
the following entities:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;branches&lt;/li&gt;
&lt;li&gt;accounts&lt;/li&gt;
&lt;li&gt;items on loan&lt;/li&gt;
&lt;li&gt;reservation requests&lt;/li&gt;
&lt;li&gt;items in the library collection&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The design should keep the data returned by these query API orthogonal.  How
this is accomplished in practice when relationships exist between entities is
by embedding identifiers in the response.  For example, an item on loan is an
item held by a specific account at a specific branch.  These three identifiers
would be part of the data returned.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;A well factored (orthogonal) set of API need not be inefficient. In the
specific case of REST over HTTP, the results of query operations are typically
cached. This is made easier when the allowed staleness of the data is defined.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Example.&lt;/strong&gt; The list of branches or items in a library&amp;rsquo;s collection needn&amp;rsquo;t
be updated more than once a day. Repeated requests that are served from a cache
require no processing on the server end. To aggregate the same information on
the server (requiring no extra code with OData or GraphQL) means that the back
end is responsible, adding more processing, latency, and harming scalability.
Magic is never cheap.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;commands&#34;&gt;Commands&lt;/h3&gt;

&lt;p&gt;An API call with side effects is called a &lt;code&gt;command&lt;/code&gt;. Commands should be
designed not to fail to the maximum extent possible. Ideally a command provides
no response, not even a success or failure status, allowing it to be handled
asynchronously. This advice requires some justification.&lt;/p&gt;

&lt;p&gt;When a command fails it can usually fail in many different ways:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;the command request could not be properly interpreted&lt;/li&gt;
&lt;li&gt;the agent issuing the command may not have permission&lt;/li&gt;
&lt;li&gt;the server hosting target resource may be unavailable&lt;/li&gt;
&lt;li&gt;the target resource itself may have been deleted&lt;/li&gt;
&lt;li&gt;the target resource state may have changed in an incompatible way&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We can group all failures into one of four categories:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;good request; temporary unavailability of the target&lt;/li&gt;
&lt;li&gt;good request; permanent unavailability of the target&lt;/li&gt;
&lt;li&gt;bad request; client side coding error (bad use of the API)&lt;/li&gt;
&lt;li&gt;bad request; invalid state (user error, race condition, etc)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Some of these require a retry, some will fail no matter how many times a retry
is attempted. Some require a client side code change, and some require the user
to fix and try again.&lt;/p&gt;

&lt;p&gt;A well designed system will understand the classification of the failure and
automatically handle all of these on behalf of the client, when possible. For
example, a retry can be attempted if a resource is not available. This too may
eventually fail. In some cases there is nothing that can be done on the client
side. The client code cannot fix itself for example (well not yet). In all
cases when recovery from a failure cannot be done, the user will need to be
informed, but no client side code need be written to handle that other than
reloading the current state of client side objects from the server.&lt;/p&gt;

&lt;p&gt;Informing the user of a failure, if done asynchronously, will allow the client
to be more responsive. The client code should be designed with this in mind: do
not assume success of your commands but wait for notification (via a domain
event) that your command succeeded. In a distributed multi-user system clients
should be notified of changes done by other users via domain events anyway.&lt;/p&gt;

&lt;p&gt;Subdomains were important for keeping queries fast. They are equally important
for avoiding race conditions in commands. Subdomains define the transactional
boundaries of the data. There are two important rules to follow:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;A single command may change data only in one subdomain.&lt;/li&gt;
&lt;li&gt;A command must be atomic: all changes or none must be committed.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This suggests that the design of domains and subdomains follows the use cases
since use cases identify all the data which must be changed. We should keep the
subdomains small. Surprisingly this advice will break the data of one entity
across subdomain boundaries. For example in Amazon the price of an item for
sale and the description of the item are in different domains.&lt;/p&gt;

&lt;p&gt;When business rules require changes to data in multiple subdomains this can still
be accomplished by commands that work in unison within the domain. For example
if the availability of rooms on a particular night in a hotel affects the room
price, then the price subdomain must listen to room booked events from the room
booking subdomain and adjust prices accordingly.&lt;/p&gt;

&lt;p&gt;Finally, long lived workflows that involve commands from multiple domains can
be implemented as &lt;a href=&#34;https://www.cs.cornell.edu/andru/cs711/2002fa/reading/sagas.pdf&#34; title=&#34;Original paper by Hector Garcia-Molina&#34;&gt;sagas&lt;/a&gt;. Sagas are an improvement on two phase commit.
Sagas support the notion of getting distributed agreement of a process (with
reduced guarantees). In case of failures, all involved domains that
successfully executed their commands perform compensating commands. If you want
to use sagas then for every command also define an idempotent compensating
command. Sagas are very cool but their discussion is beyond the scope of this
post.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Example.&lt;/strong&gt; In the online library domain there are several use cases which are
commands.  These correspond to creating, deleting, or updating the following
entities:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;add, delete, or edit account&lt;/li&gt;
&lt;li&gt;renew items on loan&lt;/li&gt;
&lt;li&gt;create or cancel reservation requests&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Branches and items held by a branch are not mutable via the API, simplifying
the implementation.  Branches are specified in a configuration file while the
collection of their items (e.g. books) is maintained in an external system.  The
renewal of an item or the creation of a reservation request can fail due to
race conditions with other users.  The success of any mutation command is
reported via a domain event.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;When a command fails (which should be rare) the user instigating the command
can be notified, either in the UI via a notification area, or by email.&lt;/p&gt;

&lt;h3 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;In the next post I will show an API design for the online library system we
have been discussing, starting from the use cases.  I will discuss testing the
API and then conclude with some thoughts about how the use case driven approach
applies to REST API design.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>SOLID Web UI Components</title>
      <link>http://bisondesign.net/post/solid-UI-components/</link>
      <pubDate>Wed, 07 Jun 2017 20:21:11 -0500</pubDate>
      
      <guid>http://bisondesign.net/post/solid-UI-components/</guid>
      <description>

&lt;h3 id=&#34;introduction&#34;&gt;Introduction&lt;/h3&gt;

&lt;p&gt;The five fundamental principles of Object Oriented Design known by the acronym
SOLID are well known in the software community (&lt;a href=&#34;https://en.wikipedia.org/wiki/SOLID_(object-oriented_design)&#34;&gt;SOLID&lt;/a&gt;). Originally
expressed by Robert C. Martin, these principles will allow a system to be more
easily maintained and extended over time. A side effect of these principles is
that the resulting system is loosely coupled.&lt;/p&gt;

&lt;p&gt;Similar principles would help the maintainability and evolution of complex UI
components in a multi vendor environment. Components are part of the view of an
MV* framework. The job of the view is to expose the model in the UI. The use of
composition in UI component design supports rapid development. It is one of the
many benefits obtained from using UI frameworks with existing libraries of
components. However the direct use of simpler components in a composite
component can lead to tight coupling and fragility. Also, the desire to reuse
components that are close but not a perfect match for requirements can lead to
the copying of those components, making upgrades difficult.&lt;/p&gt;

&lt;p&gt;SOLID Web UI design patterns would address these issues.&lt;/p&gt;

&lt;h3 id=&#34;solid-in-ui-component-design&#34;&gt;SOLID in UI Component Design&lt;/h3&gt;

&lt;p&gt;Here are five principles whose initials form the acronym SOLID.  Each
has its own acronym as well.&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Initial&lt;/th&gt;
&lt;th&gt;Acronym&lt;/th&gt;
&lt;th&gt;Concept&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;S&lt;/td&gt;
&lt;td&gt;SRP&lt;/td&gt;
&lt;td&gt;Single responsibility principle&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;O&lt;/td&gt;
&lt;td&gt;OCP&lt;/td&gt;
&lt;td&gt;Open/closed principle&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;L&lt;/td&gt;
&lt;td&gt;LSP&lt;/td&gt;
&lt;td&gt;Liskov substitution principle&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;I&lt;/td&gt;
&lt;td&gt;ISP&lt;/td&gt;
&lt;td&gt;Interface segregation principle&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;D&lt;/td&gt;
&lt;td&gt;DIP&lt;/td&gt;
&lt;td&gt;Dependency inversion principle&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;The argument from object oriented design is meant as an analogy. Still many of
the same principles apply to UI components. Just like complex classes are built
up from simpler classes, complex components can be built from simpler ones.
While &lt;a href=&#34;http://patternlab.io/&#34;&gt;atomic&lt;/a&gt; approaches to UI design are not new, they have different
goals.  Decomposition is a response to complexity.  SOLID design is a response
to fragility in the face of change; it builds on decomposition.&lt;/p&gt;

&lt;p&gt;The first three SOLID principles moderate the behavior of components and their
extensions.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Single responsibility principle.&lt;/strong&gt; Components that take responsibility for
more than one thing can end up doing nothing well (explaining why there aren&amp;rsquo;t
that many successful brain surgeon barbers). Complex UI&amp;rsquo;s should be built up
from simple components by composition.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;Open for extension but closed for modification.&lt;/strong&gt; Once released, vendors
must never modify a component&amp;rsquo;s behavior (contract). For the sake of reuse
components must also support extension.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;Liskov substitution principle.&lt;/strong&gt; Components should support extensions.
Extension developers must ensure that the extended component still satisfies the
behavior contract of the base. If not the extension will seem buggy.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The last two SOLID principles support reuse through extension. Component
extension leads to the formation of a component type system, so long as the
Liskov substitution principle is followed. Then extension can only add
behavior, leading to a subtype.&lt;/p&gt;

&lt;p&gt;Unlike objects, which have one interface, components have two interfaces. The
type of data that can be bound to a component and the binding behavior (e.g.
one-way vs two-way) define its model-facing interface. The configuration of the
component, its supported events, and the view contexts in which it can be used
define its view-facing interface. One component in a UI could be replaced by
any other that supports the same two interfaces. In theory, it would be
sufficient to implement only the model-facing interface since the user will be
able to figure out an reasonable interaction model. So we will use the
unqualified term interface to mean the model-facing interface below.&lt;/p&gt;

&lt;p&gt;A component that implements only the model-facing interface can be thought of
as an abstract base class representing that interface. Extensions can add
view-facing behavior.&lt;/p&gt;

&lt;p&gt;This definition of component interfaces leads us to examine the last two SOLID
principles.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Interface segregation principle.&lt;/strong&gt; If vendors combine simple components
into more complex components then the “interfaces” that define the bindings
should be factored to be as simple as possible. Broad interfaces are painful to
implement if all you need is a narrow one. It is certainly possible for one
component to implement multiple factored interfaces.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;Dependency inversion principle.&lt;/strong&gt; Composition is a great way of building up
complexity. Dependency inversion means identifying dependencies with interfaces
and satisfying them dynamically (referred to as &amp;lsquo;wiring&amp;rsquo; the entity).&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;solid-ui-component-use-case&#34;&gt;SOLID UI Component Use Case&lt;/h3&gt;

&lt;p&gt;Frameworks like Angular, Aurelia, and React use components to support the
creation of Web UIs. HTML 5 supports the creation of Web Components natively.
So why do we need the five SOLID patterns to govern our use of web components?
In most cases they are &lt;em&gt;not&lt;/em&gt; needed since most Web UIs are small and static.&lt;/p&gt;

&lt;p&gt;However, a more disciplined approach is needed when a library of components is
created by a vendor and reused at scale by the customers of that vendor. The
same is true when the vendor is one department of an organization creating a
library to be used by other departments. In both of these cases updating the
library must be seamless, from the point of view of the &amp;ldquo;customers&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;This is where SOLID component design shines. These principles allow maximum
reuse with minimal coupling between the components as a means to productivity
and robustness.&lt;/p&gt;

&lt;p&gt;Reuse comes in two flavors. The first type is &amp;ldquo;inheritance&amp;rdquo; where a
component is extended to add features or modify presentation without breaking
the contract of the base component. In this case the extension can act as a
plug-in replacement for the base.&lt;/p&gt;

&lt;p&gt;Extension can be done with direct references to the base component to keep the
implementation simple. Using explicit references in an extension is pragmatic since
indirection always comes at a price (e.g., cognitive complexity and performance
to name a few).  Extensions are typically done at a lower level, for example
when creating new widgets for a library.&lt;/p&gt;

&lt;p&gt;The second type of reuse is &amp;ldquo;composition&amp;rdquo; where simpler components are combined
into more complex components. This is a more typical scenario done at a higher
level when pages or mashups are being designed. In this scenario the references
to the inner components should remain abstract allowing the wiring to a
concrete implementation on initialization. The decision can vary by context and
configuration and even by data type. So for example, a UI showing a list of
items in a shopping cart can choose the component to instantiate based on the
type of item.&lt;/p&gt;

&lt;p&gt;The bindings of the inner components should be established once their context
is defined. This is true regardless of the reuse type (extension and
composition). The view facing configuration of inner components (related to
layout) can be hard-coded.&lt;/p&gt;

&lt;h3 id=&#34;implementation&#34;&gt;Implementation&lt;/h3&gt;

&lt;p&gt;The ability to create components on the client side is built into HTML 5.
&lt;a href=&#34;https://en.wikipedia.org/wiki/Web_Components&#34;&gt;Web Components&lt;/a&gt; are a group of standards proposed as a W3C specification.
They allow you to create new HTML elements that are reusable, composable, and
encapsulated. How do you write SOLID UI components as HTML 5 web components?&lt;/p&gt;

&lt;p&gt;You will want to start by splitting your components in to modules. When
projects get to a certain size, they will have to deal sooner or later with the
&amp;lsquo;dependency hell&amp;rsquo; problem. This happens when two different versions of the same
library are needed at the same time.&lt;/p&gt;

&lt;p&gt;Binding is always done on the client, as that is where the events are triggered
and consumed.  Static binding is too restrictive as well, as the shopping cart
example showed.&lt;/p&gt;

&lt;p&gt;There are two distinct approaches we can pursue for wiring (creating the view tree
with dependency resolution) depending on where it will take place. It can be
done on the client using templates, or it can be done dynamically on the
server as data is added to the model that needs to be displayed in the view. I
prefer a template approach on the client. Templates can be stored in HTML, the
approach chosen by Aurelia.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;template id=&amp;quot;aboutOurTeam&amp;quot;&amp;gt;
  &amp;lt;h1&amp;gt;About&amp;lt;/h1&amp;gt;
  &amp;lt;hr&amp;gt;
  &amp;lt;p class=&amp;quot;lead&amp;quot;&amp;gt;${aboutMessage}&amp;lt;/p&amp;gt;
  &amp;lt;hr&amp;gt;
  &amp;lt;h2&amp;gt;Our Team&amp;lt;/h2&amp;gt;
  &amp;lt;div repeat.for=&amp;quot;p of profiles&amp;quot;&amp;gt;
    &amp;lt;compose model.bind=&amp;quot;p&amp;quot; view-model=&amp;quot;profile&amp;quot;&amp;gt;&amp;lt;/compose&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/template&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here the page &lt;a href=&#34;https://html.spec.whatwg.org/multipage/scripting.html#the-template-element&#34;&gt;template&lt;/a&gt;, given a binding context that includes a &amp;lsquo;profiles&amp;rsquo;
array can loop over the entries of this array and for each include a &amp;lsquo;profile&amp;rsquo;
view model binding it&amp;rsquo;s context to the given entry. The context for the template is
established when it is adopted into the DOM tree of the view.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt; var template = document.querySelector(&#39;#aboutOurTeam&#39;);
 for (var i = 0; i &amp;lt; data.length; i += 1) {
   var cat = data[i];
   var clone = template.content.cloneNode(true);
   var cells = clone.querySelectorAll(&#39;td&#39;);
   // ... establish context and recursively compose children
   template.parentNode.appendChild(clone);
 }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;compose&lt;/code&gt; element in the example above is a &lt;a href=&#34;https://w3c.github.io/webcomponents/spec/custom/&#34;&gt;custom web element&lt;/a&gt;
defined by Aurelia.&lt;/p&gt;

&lt;p&gt;How is this approach SOLID?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;SRP: The &amp;lsquo;AboutOurTeam&amp;rsquo; view model has a single responsibility. Composition
and binding allow the templates themselves to remain simple. Here the focus is
on the headings, message, and the list of team members.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;OCP: Extending a template can be done by means of the &lt;a href=&#34;https://w3c.github.io/webcomponents/spec/shadow/&#34;&gt;Shadow DOM&lt;/a&gt;,
another HTML 5 feature. This allows an element&amp;rsquo;s content to be replaced by
completely encapsulated HTML markup that has access to the original element.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Aside. Suppose you created a widget that contained an &lt;code&gt;h2&lt;/code&gt;, a &lt;code&gt;p&lt;/code&gt; and a text
&lt;code&gt;input&lt;/code&gt; field to allow users to rate the content (the text can be &lt;code&gt;*&lt;/code&gt; to &lt;code&gt;*****&lt;/code&gt;).
Now you wanted to replace the input field with a star rater. It is possible to
shadow the original widget, keeping the &lt;code&gt;h2&lt;/code&gt; and &lt;code&gt;p&lt;/code&gt; visible while displaying a star
rater widget whose value feeds the invisible text field.&lt;/p&gt;
&lt;/blockquote&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;LSP: Careful delegation to the base of an extended component, as in the above
example, ensures that the original contract is honored.  The component interacts
with the user in a different way - its view-facing interface has changed - but it
will still be plug-in compatible with the original widget component.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;ISP: Models are JavaScript objects. They can be decomposed into arrays, maps,
or primitive values (string, number, or boolean). Loops decompose arrays. Name
bindings decompose maps. Finally, primitives can have only a finite set of
semantic types (e.g. number can represent an integer, decimal, money,
percentage, distance, time, etc). These few semantic types make it possible to
support a finite set of primitive interfaces for data binding.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;DIP: The &amp;lsquo;AboutOurTeam&amp;rsquo; view model had a dependency on the &lt;code&gt;profile&lt;/code&gt; view model.
This dependency may resolve to a concrete type (&lt;code&gt;profile.html&lt;/code&gt; and &lt;code&gt;profile.js&lt;/code&gt; in
aurelia).  But you can imagine a system where additional logic was involved in
selecting a view model using additional information about the data instance to be
bound and also the context.  In particular resolution can take into consideration:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Context in the view&lt;/li&gt;
&lt;li&gt;The type of data being bound (e.g. an extension of &lt;code&gt;profile&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;User based configuration&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;missing-details&#34;&gt;Missing Details&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Dynamic Behavior&lt;/strong&gt;. I have not touched on the more dynamic aspects of the UI
such as binding and support for events. Needless to say this alone is a vast
area already well covered by many frameworks. For example a &lt;a href=&#34;http://redux.js.org&#34;&gt;reactive&lt;/a&gt;
approach that eschews binding and relies for events alone would work well. But
other approaches would also work.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Extension&lt;/strong&gt;. The approach given here needs a more concrete description of how
to use the shadow DOM to extend components without modification (OCP). Some
methods to simplify the repetitive aspects of extension and to preserve the
contract of the base (LSP) would be needed as well.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Base Properties&lt;/strong&gt;. All components should derive from a common base class to
supply the view-facing interface. Common properties would include an id, a
name, x, y &amp;amp; z coordinates, width and height, and a boolean for visibility.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Events&lt;/strong&gt;.  Events (e.g., onClick) that are specific to a component type (the
&lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/API/EventTarget&#34;&gt;EventTarget&lt;/a&gt;,
e.g. &lt;code&gt;button&lt;/code&gt;) will be present on all instances of that type. Listeners must
register with the target and implement the event listener interface:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;interface EventListener {
  void handleEvent(in Event evt);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;All the information needed by the listener will be present in the
&lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/API/Event&#34;&gt;Event&lt;/a&gt; object,
including the target object. Event listeners can subscribe to one or more
events. Likewise, one or more listeners can subscribe to any given event
(making it a multi-cast event).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Other Properties&lt;/strong&gt;.  The properties of the base and derived component
share these characteristics:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;they can be bound for reading (if binding is supported)&lt;/li&gt;
&lt;li&gt;they are exposed as attributes of the element&lt;/li&gt;
&lt;li&gt;they are exposed programmatically via setter and getter methods&lt;/li&gt;
&lt;li&gt;they can be tested in css for conditional formatting&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Composition&lt;/strong&gt;. The method by which multiple components are composed into a
compound component should be defined. The interface of the compound component
is the union of the interfaces of the children components that are bindable
from the aggregate.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Dependency Injection&lt;/strong&gt;.  The DIP is already implemented in some systems via
dependency injection.  This is the case with Aurelia for example.  In others
it will require explicit wiring code.  The wiring should check compatibility
of a component with the interface that it must satisfy. Wiring can still be
done manually but the exact mechanism must be explained.&lt;/p&gt;

&lt;h3 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;In this blog I introduced the concept of SOLID Web UI components. I explained
how these five principles borrowed from software design can be applied to
component design and when they should be applied. By following these principles
a custom UI will be less likely to break when the underlying libraries are
upgraded. Finally, I showed how extensibility can be integrated into a UI
component library using some HTML 5 features and existing frameworks.&lt;/p&gt;

&lt;p&gt;In the future I would like to implement &lt;a href=&#34;http://todomvc.com/&#34;&gt;http://todomvc.com/&lt;/a&gt; using
this approach.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>A Metric for Simplicity</title>
      <link>http://bisondesign.net/post/metric-for-simplicity/</link>
      <pubDate>Thu, 01 Jun 2017 00:00:00 +0000</pubDate>
      
      <guid>http://bisondesign.net/post/metric-for-simplicity/</guid>
      <description>

&lt;h3 id=&#34;the-value-of-simplicity&#34;&gt;The value of simplicity&lt;/h3&gt;

&lt;p&gt;The most complex requirement in software development is simplicity. In this post I
will describe a technique for measuring the simplicity of a UI design. This can be
used to choose the simplest design from a selection.&lt;/p&gt;

&lt;p&gt;I recently ran a training exercise in problem solving with an audience of 50
top developers at a large corporation. Technology companies need to
innovate in order to stay ahead of the competition but innovation requires
problem solving.  But before we can solve problems we need to find them. For
example, I never knew that I absolutely &lt;em&gt;had&lt;/em&gt; to have a fingerprint reader on my
phone until my wife got one. Whoever discovered that we all need a fingerprint
reader was a genius.&lt;/p&gt;

&lt;p&gt;The true genious of this invention is that it is so simple; even a
toddler can learn to unlock a phone if the parents are crazy enough to
register his fingerprints on it. Simplification (represented by the meme &amp;ldquo;Less
if More&amp;rdquo;) is part of solution refinement, the often skipped last step in problem
solving.&lt;/p&gt;

&lt;h3 id=&#34;the-meaning-of-simplicity&#34;&gt;The meaning of simplicity&lt;/h3&gt;

&lt;p&gt;Simplicity has different manifestations in different domains. In mathematics it
is often referred to as elegance. An elegant solution is clear, concise, and
surprising. My favorite example is Cantor&amp;rsquo;s demonstration that the real numbers
are uncoutably infinite. Here he explains it to David Hilbert:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://bisondesign.net/images/Diagonal-Proof.png&#34;/&gt;&lt;/p&gt;

&lt;p&gt;If Cantor&amp;rsquo;s proof had been clunky, the result would have been just as
beneficial to mathematicians. A clunky proof woudn&amp;rsquo;t really matter as long as
it was still correct. Still, elegant proofs are a delight to behold, even on
repeated viewing.&lt;/p&gt;

&lt;p&gt;Simplicity in software matters. Your product (whether it&amp;rsquo;s an app or a service)
is not an end in itself but a means to an end. In the UI complexity impedes the
end user from doing his task. In code complexity impedes maintainability. In
software design complexity impedes flexibility. A clunky UI, a clunky design
and a clunky implementation do matter.&lt;/p&gt;

&lt;p&gt;Simplicity in software design which closely resembles elegance in mathematics,
is the subject of a future blog post. Here we will stick with the user
experience and in particular simplicity in the UI.&lt;/p&gt;

&lt;h3 id=&#34;a-model-for-the-interaction-of-a-human-with-the-ui&#34;&gt;A model for the interaction of a human with the UI&lt;/h3&gt;

&lt;p&gt;A milestone in the field of usability in computer systems was the publication
of &amp;ldquo;The Psychology of Human-Computer Interaction&amp;rdquo; by Card, Moran, and Newell
(1983). The authors proposed a model of the &amp;ldquo;Human processor&amp;rdquo; citing ten
scientific principles of operation, like &lt;a href=&#34;https://en.wikipedia.org/wiki/Fitts&#39;s_law&#34; title=&#34;Fitts&#39;s law - Wikipedia&#34;&gt;Fitts&amp;rsquo;s law&lt;/a&gt; and the &lt;a href=&#34;https://en.wikipedia.org/wiki/Power_law_of_practice&#34; title=&#34;Power Law of Practice - Wikipedia&#34;&gt;Power Law
of Practice&lt;/a&gt; based on empirical data.&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;http://bisondesign.net/images/03-HumanProcessor_Card_Moran_Newell_1983.jpg&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;Models are useful for analysis. The suitability of a model can be judged by its
predictive accuracy. Our model of human-computer interaction will be simpler
than the image above which comes from the book, but it will use some of the same
ideas.&lt;/p&gt;

&lt;p&gt;Suppose automated analysis could be added to a UI design tool such as
&lt;a href=&#34;https://balsamiq.com/&#34;&gt;Balamiq Mockups&lt;/a&gt; to help assess the usability of a UI for performing
a specific task at the design stage. Given a task, the UI designer would click,
type and drag to complete the actions needed to complete the task using the
mock, imitating the future user. These would be recorded and analyzed.&lt;/p&gt;

&lt;p&gt;A UI can be designed to accomplish multiple tasks. For example, the same UI may
be used to create an account or change a password: two distinct tasks. In that
case both tasks would be considered in the analysis of the UI. These would not
be given equal weight however. The weight of a task to a given persona will be
proportional to its frequency. For example the number of times that task needs
to be accomplished in a typical year, month or week.&lt;/p&gt;

&lt;p&gt;Being able to accomplish a task is not enough. That&amp;rsquo;s basic suitability
testing. Each interaction with and transition between UI components has a cost.
Clicking on an item that is a big target costs less than if it were small. The
distance the pointer has to move has a cost. Picking an item in a cluttered
menu has a higher cost than clean ones. The sum of the costs is &amp;ldquo;inefficiency&amp;rdquo;.
Our goal will be to minimize inefficiency over the task.&lt;/p&gt;

&lt;p&gt;Simplicity can be measured by the amount of &amp;ldquo;ink&amp;rdquo; or &amp;ldquo;clutter&amp;rdquo; in the UI. Less
is more! In a good UI the quotient of task value, divided by simplicity and
efficiency is the metric by which I will judge the UI.&lt;/p&gt;

&lt;p&gt;The sequence is not necessarily unique.  Sometimes the sequence is constrained,
as when a button is disabled until certain fields are filled in properly.  These
variation can be measured as well.&lt;/p&gt;

&lt;p&gt;This has gotten long enough.  In a future blog post I will discuss:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;the model of human behavior while interacting with a UI&lt;/li&gt;
&lt;li&gt;measuring the cost of learning a UI by repeated performance of the same tasks&lt;/li&gt;
&lt;li&gt;metric limitations, given different users have different experience levels&lt;/li&gt;
&lt;li&gt;use of deep learning to refine the model&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;references&#34;&gt;References&lt;/h3&gt;

&lt;p&gt;[1] Card, Stuart K.; Moran, Thomas P.; Newell, Allen (1983). The Psychology of
Human–Computer Interaction. Hillsdale, NJ: L. Erlbaum Associates. ISBN
0898592437.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Fast Username Validation</title>
      <link>http://bisondesign.net/post/fast-username-validation/</link>
      <pubDate>Tue, 07 Feb 2017 20:21:11 -0500</pubDate>
      
      <guid>http://bisondesign.net/post/fast-username-validation/</guid>
      <description>

&lt;h3 id=&#34;a-good-problem-to-have&#34;&gt;A Good Problem to Have&lt;/h3&gt;

&lt;p&gt;This post describes a novel way to use probabilistic data structures to improve
the user experience of creating a new account.&lt;/p&gt;

&lt;p&gt;You run a site where customers create an account with a user name and password.
Your site is wildly successful and more customers flock to join. Soon all
the good user names are taken. With all your success the fundamental user
experience of creating an account begins to suck.&lt;/p&gt;

&lt;p&gt;Why? The first group of users naturally choose their first name. But there are
4.8 million &lt;em&gt;James&lt;/em&gt; in the United States and almost as many &lt;em&gt;Johns&lt;/em&gt;. The
&lt;a href=&#34;http://names.mongabay.com/male_names.htm&#34;&gt;twenty most common male names&lt;/a&gt;
account for 32 percent of the male population. There are about 4 million
&lt;em&gt;Marys&lt;/em&gt; and 1.6 million &lt;em&gt;Patricias&lt;/em&gt;. Incredibly prospective customers are told,
&lt;em&gt;&amp;ldquo;Sorry, username &amp;lsquo;Maurice&amp;rsquo; is already taken&amp;rdquo;&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;First initial and last name will go a lot further. However, thanks to human
psychology, we again run out of steam sooner than you expect. At my company,
there were three John Lloyds. Some first names just sound better with a
last name like John and Lloyd. As a parent of five I can attest to thinking a
lot about that.&lt;/p&gt;

&lt;!-- img src=&#34;https://imgs.xkcd.com/comics/baby_names.png&#34;/ --&gt;

&lt;h3 id=&#34;username-validation-requirements&#34;&gt;Username validation requirements&lt;/h3&gt;

&lt;p&gt;By the time you reach 50,000 users (congratulations, by the way) your sucky UI
will require the user to make repeated attempts to find a name that is not
taken. Some frustrated non-customers are giving up; now you need to fix this
problem quickly. For the ideal user experience your account creation UI needs
to be simple and responsive.  It should have these properties:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;A visual queue that the name being typed is not yet taken&lt;/li&gt;
&lt;li&gt;Less than 0.5s latency when checking if a given name is taken&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The visual queue could be a greyed out &amp;ldquo;Submit&amp;rdquo; button whenever the name is
already taken. It could also be a pink background in the user name text input
box. With these improvements, your customers will once again be able to choose
a name easily without the heartbreak of repeated rejections. The low latency
is needed for the impression of a responsive UI.&lt;/p&gt;

&lt;table&gt;
   &lt;tr&gt;
      &lt;td&gt;&lt;img src=&#34;http://bisondesign.net/images/NewAccountDialogEmpty.png&#34;/&gt;&lt;/td&gt;
      &lt;td&gt;&lt;img src=&#34;http://bisondesign.net/images/NewAccountMissingPassword.png&#34;/&gt;&lt;/td&gt;
      &lt;td&gt;&lt;img src=&#34;http://bisondesign.net/images/NewAccountReadyToSubmit.png&#34;/&gt;&lt;/td&gt;
   &lt;/tr&gt;
&lt;/table&gt;

&lt;p&gt;The three images above show how a simple dialog can provide feedback for a
taken username, a weak password, and a non-matching confirmation. In all
cases the background is pink when there is a problem.  The submit button
is enabled only once all three problems are eliminated.  Doing all three
checks on the client side leads to a responsive and simple user experience.&lt;/p&gt;

&lt;h3 id=&#34;probabilistic-data-structures&#34;&gt;Probabilistic data structures&lt;/h3&gt;

&lt;p&gt;This type of behavior should be done in JavaScript on the browser.
Unfortunately, you can&amp;rsquo;t just download a long list of taken names. Even a
&lt;a href=&#34;https://en.wikipedia.org/wiki/Trie&#34;&gt;trie&lt;/a&gt; of names is too big. A trie can
compress common prefixes but the number of nodes is still proportional to the
number of distinct names in the trie. The sheer number of names appears to make
a client side solution impossible. Unless of course you are willing to trade
off certainty for size.&lt;/p&gt;

&lt;p&gt;Enter a probabilistic data structure called a &lt;a href=&#34;https://en.wikipedia.org/wiki/Bloom_filter&#34;&gt;Bloom
Filter&lt;/a&gt;. Probabilistic algorithms
behave like normal algorithms but have a theoretical chance of being wrong. The
trade off is that they act faster or require less memory to produce the result.&lt;/p&gt;

&lt;p&gt;A Bloom Filter is a probabilistic (unreliable) set. Unlike a trie, a Bloom
Filter can compress both the letters and the number of words in a collection to
an in-memory bit vector. You can&amp;rsquo;t always trust that a true result from testing
set membership is correct, but a simple formula gives statistical limits on
the number of false positives. Here is how it works.&lt;/p&gt;

&lt;p&gt;Suppose the bit vector has size M, where M is very large. To add user name S to
the filter, compute k hash values ${h_0(S), h_1(S), &amp;hellip;, h_k(S)}$ and set
those bits to 1. The k hash functions should be &lt;em&gt;independent&lt;/em&gt;. The numbers M
and k are selected based on the expected number of names. Checking for the presence
of a name involves calculating the same set of bits and testing it they are set.
If even one of them is not set, then the name could not be present in the filter.
If, however, they are all set, the name is only likely to be present.&lt;/p&gt;

&lt;p&gt;The space advantage in a Bloom Filter comes from the compactness from the data
structure. A Bloom filter with 1% error and an optimal value of k, requires
only about 9.6 bits (1.2 bytes) per element — regardless of the size of the
elements.  So a site with 50,000 user names would require 64K bytes for a filter.
That&amp;rsquo;s the size of a small (400x600) gif image.&lt;/p&gt;

&lt;p&gt;A word of caution. The theoretical percent error assumes the hash functions are
mutually independent.  It is not that easy to get a family of independent hash
functions, but based on my research the error is not too far off.&lt;/p&gt;

&lt;h3 id=&#34;edge-cases-and-recommendations&#34;&gt;Edge cases and Recommendations&lt;/h3&gt;

&lt;p&gt;There is a delay between the time that the bloom filter is calculated on the
server and when it is used on the client.  Suppose for the sake of argument that
your site has 50,000 names and adds 600 more users every day.  The bloom filter
may be recalculated 6 times a day and republished.&lt;/p&gt;

&lt;p&gt;If a new user happens to pick one if these 100 new user names before they are
added they &lt;em&gt;might&lt;/em&gt; still get a false negative.&lt;/p&gt;

&lt;p&gt;What do you do when a false negative happens? The simplest solution is to blame
latency. The user does not know that we are calculating taken names locally
using a Bloom Filter. The UI could optimistically send the names being typed
(after a 0.5 second pause) on to the server to validate.  If the latency to
your server is small, the additional check will only take an extra second.  If
the name is indeed still not taken, the &amp;ldquo;Submit&amp;rdquo; button can be enabled.  If
it happened to be among the 100 newly added names, that fact is sent to the
client which adds the name to a stop-list of known taken names.  The stop-list
can be uploaded along with the Bloom Filter.&lt;/p&gt;

&lt;p&gt;As you start out your web site all you really need is a stop-list to get the
same user experience. One thousand 20 letter user names is only 20K
un-compressed. Design your UX to scale up to 50 or 100 times as many users and
change the test to use a bloom filter when the download size of the stop-list
gets too big.&lt;/p&gt;

&lt;h3 id=&#34;limitations-and-conclusion&#34;&gt;Limitations and Conclusion&lt;/h3&gt;

&lt;p&gt;Facebook has over 1.8 billion active users. A Bloom Filter solution will not
scale to Facebook proportions. Google has the same &amp;lsquo;problem&amp;rsquo;. In these cases
validation happens on the server and the server suggests a number of unused
names to the user following certain patterns. Can you think of a way in which
the giant could improve on this?&lt;/p&gt;

&lt;p&gt;Good luck and I hope you enjoyed my first technical blog post. In the future
I will share some code for making fast username validation happen.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Welcome to Bison Design</title>
      <link>http://bisondesign.net/post/bisondesign/</link>
      <pubDate>Mon, 06 Feb 2017 15:31:02 -0500</pubDate>
      
      <guid>http://bisondesign.net/post/bisondesign/</guid>
      <description>&lt;p&gt;Welcome to the Bison Design blog!&lt;/p&gt;

&lt;p&gt;I believe that crafting software is an art. My training in mathematics and
decades of experience developing enterprise software gave me a unique
perspective to appreciate software design. The search for simplicity influenced
my work and this is the subject of my blog.&lt;/p&gt;

&lt;p&gt;I hope the excitement I feel upon finding that simplicity comes across in a way
that is both educational and entertaining. If you find these pages interesting
please share your insights in the comments.&lt;/p&gt;

&lt;hr /&gt;

&lt;blockquote&gt;
&lt;p&gt;I am a Technical Fellow at PTC, a global provider of solutions and technology
platforms for IoT and AR. My opinions are my own.&lt;/p&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
  </channel>
</rss>