<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Api on Bison Design</title>
    <link>http://bisondesign.net/tags/api/index.xml</link>
    <description>Recent content in Api on Bison Design</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>All rights reserved - 2017</copyright>
    <atom:link href="http://bisondesign.net/tags/api/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Use-case Driven API Design (part 1)</title>
      <link>http://bisondesign.net/post/use-case-driven-design-1/</link>
      <pubDate>Sat, 07 Apr 2018 20:21:11 -0500</pubDate>
      
      <guid>http://bisondesign.net/post/use-case-driven-design-1/</guid>
      <description>

&lt;h3 id=&#34;preface&#34;&gt;Preface&lt;/h3&gt;

&lt;p&gt;Rarely does one get entertained by reading software manuals, though Knuth&amp;rsquo;s
&lt;a href=&#34;https://www.amazon.com/TeXbook-Donald-Knuth/dp/0201134489&#34;&gt;The TeXbook&lt;/a&gt; is one notable exception. Rarer still is getting pleasure from
reading &lt;em&gt;guidelines&lt;/em&gt; for writing software. Imagine my surprise when I found
myself reading and actually liking &lt;a href=&#34;https://www.amazon.com/Framework-Design-Guidelines-Conventions-Libraries/dp/0321545613&#34;&gt;Framework Design Guidelines: Conventions,
Idioms, and Patterns for Reusable .NET Libraries&lt;/a&gt; by Cwalina and Abrams. The
book was seriously fun and educational at the same time. It was hard to put
down. One of the general lessons drilled into me from that book was the need to
paper test an API. The authors stressed the need for an API to be usable by
design, not by accident. And design takes hard work.&lt;/p&gt;

&lt;p&gt;This is my first post is about API design - a mysterious mixture of art and
science - about which I am passionate. Inspired by such great authors, my goal
for you, dear reader, is that you find this post fun and educational. If not,
at least I can promise that the pain will be short-lived.&lt;/p&gt;

&lt;h3 id=&#34;why-a-published-api-needs-design&#34;&gt;Why a published API needs design&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;Design thinking&lt;/em&gt; is the name given to the movement that is bringing usability
and visual design into the earliest stages of a products life-cycle. It applies
to electronics, web sites, software, and any product that requires human
interaction. It&amp;rsquo;s methodology includes a deep understanding of the user, the
problem being solved, and the solution space. It encourages ideation (making a
lot of crazy ideas for solutions), mixing and matching ideas, and
experimentation. It is a lot like brainstorming in that regard.&lt;/p&gt;

&lt;p&gt;Well, an API is a product that requires human interaction as well. The &amp;lsquo;P&amp;rsquo; in
API stands for &amp;lsquo;programming&amp;rsquo;, and at least for the present most of the
programmers I know are human. Some day if we eliminate programmers we can
shorten API to AI.&lt;/p&gt;

&lt;p&gt;Why should an API design require any less thought than a visual UI? The target
audience (we programmers) can&amp;rsquo;t be assumed to have any more domain knowledge
than the user of the UI, and in fact we likely have less. As a profession we
fall back too easily on the assumption that programmers will know what to do.
We also assume that if the programmers make a mistake then QA will find the
bugs.&lt;/p&gt;

&lt;p&gt;Another strong argument for careful design is that an API has a long life and
if successful will be read many more times than it was written. You might have
100&amp;rsquo;s or 1000&amp;rsquo;s of programmers reading your API and trying to make sense out of
it. They will all trip over the same usability issues and find the different
workarounds. Time invested in making an API usable pays dividends over its
lifetime and can contribute to its success.&lt;/p&gt;

&lt;p&gt;This post specifically targets the design of the published APIs for business
objects. This is a subset of the more general area of API design. A published
API is intended to be consumed by 3rd parties (either within your enterprise or
outside of it). Thus the design of the API is more critical since it is hard to
change. It is also harder to explain. APIs for business objects tend to be
limited. Business objects have very rigid rules for mutation because the
business imposes many constraints and invariants on those objects. These
two factors influence the design of the API as will be seen below.&lt;/p&gt;

&lt;p&gt;So how do we go about making an API for a domain object as usable and
intuitive as possible, and what does this even mean? Read on!&lt;/p&gt;

&lt;h3 id=&#34;considerations-for-a-good-api-design&#34;&gt;Considerations for a Good API Design&lt;/h3&gt;

&lt;p&gt;An API is a projection of a model. If you have a service that your customers
want to use they likely have a model of that service in their minds: the type
of data it provides, what they want to do with and to that data, and so on. If
your service mimics a traditional process or service then your customers may
already have a model based on that in their minds.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Example.&lt;/strong&gt; &lt;a href=&#34;https://www.shutterfly.com/&#34;&gt;Shutterfly&lt;/a&gt; produces
and delivers printed photo albums from pictures you supply online. The model I
have in my mind when I use Shutterfly is based on my past experience of putting
pictures into an empty photo album I purchased in a department store. I want
the same flexibility in choosing the style of album, its dimensions, the number
of pages, laying out my pictures, adding captions, etc. Shutterfly builds on that
model in their UI and then extends it beyond the original, e.g. zooming in on a
picture or applying filters. I appreciate these improvements to the traditional
process. But the reason I find their site easy to use is because they use a
mental model I am already familiar with.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;A business API typically models data, not physical objects like photo albums.
But that does not mean we are off the hook when it comes to the model&amp;rsquo;s design.
For example, in an on-line library portal a user must first apply for an
account (aka library card). The process should be modeled on the paper forms
that a librarian gave you when you applied for your first a library card in a
local branch. (I hope you still have your library card.) Of course this form
differs from the form you filled out to get a driver&amp;rsquo;s license. While these
forms collect some of the same data they also collect data that is unique to
each application. A library does not require proof of insurance to issue a card
and the Department of Motor Vehicles does not care about your literary
interests. The nomenclature differs as well. To the library you are the
&lt;em&gt;borrower&lt;/em&gt; whereas to the DMV you are the &lt;em&gt;driver&lt;/em&gt;. One way of putting this is
to say that data has a &lt;em&gt;shape&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Choosing the right model does matter. It may make the difference between an
intuitive API and one that is clunky. If the model is not simple and natural
for the domain, it will be fighting for user mind-share with the &lt;em&gt;true model&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Once the model is chosen, the API must be designed to expose &lt;em&gt;commands&lt;/em&gt; and
&lt;em&gt;queries&lt;/em&gt; against that model. These will again depend on the domain, and they
&lt;a href=&#34;https://martinfowler.com/bliki/CommandQuerySeparation.html&#34;&gt;should be separate&lt;/a&gt;. While you may be able to change your address on-line
with the library application, the DMV will require you to bring proof of your
new address in person. At least here in Michigan they are not very trusting.
This API then becomes the &lt;em&gt;projection&lt;/em&gt; of the model. It is not the entire
model, but it is the part that external developers are allowed to see.&lt;/p&gt;

&lt;p&gt;I propose four considerations, my four &amp;lsquo;C&amp;rsquo;s for a good API design:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Complete&lt;/li&gt;
&lt;li&gt;Compact&lt;/li&gt;
&lt;li&gt;Consistent&lt;/li&gt;
&lt;li&gt;Clear (intuitive)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In the &lt;a href=&#34;../use-case-driven-design-2/&#34;&gt;second post&lt;/a&gt; of this series I will elaborate on each of these in turn.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Use-case Driven API Design (part 2)</title>
      <link>http://bisondesign.net/post/use-case-driven-design-2/</link>
      <pubDate>Sat, 07 Apr 2018 20:21:11 -0500</pubDate>
      
      <guid>http://bisondesign.net/post/use-case-driven-design-2/</guid>
      <description>

&lt;h3 id=&#34;preface&#34;&gt;Preface&lt;/h3&gt;

&lt;p&gt;In the &lt;a href=&#34;../use-case-driven-design-1/&#34;&gt;previous post&lt;/a&gt; I talked about the importance of good design when
making a published API. I ended by giving four &amp;lsquo;C&amp;rsquo;s of a good API: complete,
compact, consistent and clear. Here I elaborate on them one by one.&lt;/p&gt;

&lt;h4 id=&#34;complete&#34;&gt;Complete&lt;/h4&gt;

&lt;p&gt;An API design is complete if it allows customers to write client code that
supports all use cases allowed by the business. This is a dynamic situation.
With time the business may change their policy and allow new use cases against
the same domain objects. Or it may introduce new domain object types. In either
case a once complete API may suddenly become incomplete.&lt;/p&gt;

&lt;p&gt;It would be a mistake to anticipate the business and to allow clients to do
things that are not allowed by the business just in case it is allowed in the
future. This type of thinking can lead to vulnerabilities and loopholes. In the
worst case it can even lead to data corruption as business invariants may not
be protected. For this reason it is best to start with an agreed set of
business capabilities that can be developed into use cases and the API can be
designed to support those.&lt;/p&gt;

&lt;p&gt;Adding behavior or new types to a domain should not break existing client code.
Breaking changes, though rare, can happen and the smart architect is prepared
for these.  This can be demonstrated with a concrete example.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Example.&lt;/strong&gt; The Department of Motor Vehicles API may initially allow customers
to manage their home address information with public APIs, but later decide that
this business capability should no longer be supported. It would be much better
for this to appear as a deprecation of an API rather than a reduction in the
scope of a much broader API.&lt;/p&gt;

&lt;p&gt;Now if the initial design had allowed the client code to supply a new customer
info object (&lt;code&gt;UpdateDriverInfo&lt;/code&gt; which included the customer&amp;rsquo;s address), this
API would end up being clunky after the business change. The implementation
would require new business logic (did the address change?) and failure modes.
These changes would trigger changes to the documentation as well. While any
breaking change is hard on client developers, adding failure modes to an
existing API is worse since it entails extra work on the part of the client.&lt;/p&gt;

&lt;p&gt;A much better initial design would be an API that changed only the customer
address (&lt;code&gt;UpdateDriverAddress&lt;/code&gt;) as this could simply be deprecated in one
release and eliminated in another. It would also be easier for client
developers to see the effects of the deprecation.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;You may be wondering if the logical continuation of this reasoning is to have
separate APIs for the customer&amp;rsquo;s street address, city, zip code, etc. Your
intuition will tell you that this is wrong, but there is also a solid principle
against such granularity. Go back to the business and ask them: would you ever
allow the customer to change their city without changing the rest of their
address? They will tell you that the likelihood of a customer moving from one
city to another but keeping the same street address is so small that it is
effectively zero. Some things tend to change together and can be treated as a
single &amp;ldquo;value&amp;rdquo;. This also leads to a more compact set of APIs, which leads to
our second consideration for good API design.&lt;/p&gt;

&lt;h4 id=&#34;compact&#34;&gt;Compact&lt;/h4&gt;

&lt;p&gt;There are two divergent schools of thought regarding the design of an API. A
&lt;strong&gt;humane interface&lt;/strong&gt; provides many convenience methods. It leads to shorter
client code and a more fluid program structure. A &lt;strong&gt;minimal interface&lt;/strong&gt; is just
as complete but with a minimum of redundancy. Client code has one clear
approach that tends to be longer.&lt;/p&gt;

&lt;p&gt;When designing a published API, it is good to keep in mind that changes are
very risky once the API is published. A client may be using the API and
removing it may cause the client code to break. As a result, API methods are
often deprecated and not removed (Java 9 removed APIs that had been
deprecated since Java 2 and the repercussions will last almost as long). For
this reason it is better to design a &lt;em&gt;minimal interface&lt;/em&gt; and set a very high
bar for adding convenience methods in future releases.&lt;/p&gt;

&lt;p&gt;In reality risk mitigation through compactness is advice squarely aimed at
framework and library API sets where business constraints are non-existent or
negligible (the business has no business changing the definition of a natural
logarithm). For business objects, whose API are primarily defined by business
needs and must preserve business invariants, compactness is not as high a
priority.&lt;/p&gt;

&lt;p&gt;Instead business domain APIs should be first factored along the lines drawn by
use cases which allow mutation. Business data that is needed to support command
use cases should be encapsulated within a sub-domain. Then within that
sub-domain compactness can play a secondary role in the design of the APIs.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Example.&lt;/strong&gt; In the library checkout service the business may decide that a
checkout is allowed only if&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;the borrower has less than \$10.00 in fines&lt;/li&gt;
&lt;li&gt;the borrower has fewer than 25 items out already&lt;/li&gt;
&lt;li&gt;a copy of the item is not already being held by the borrower&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;An analysis of the use cases would show that the fines are primarily managed by
another subdomain (library accounts). But the number and particulars of the
held items belong to the same service that manages checkout. So for this reason
a single API that returns the collection of all items held by a particular
borrower would be both compact and appropriate. The same subdomain would also
expose an API that allows a new item to be added the list (&lt;code&gt;BorrowItem&lt;/code&gt;).
Adding an item would be accomplished transactionally, so that two checkouts
done at the same time from different clients would not both succeed if they
would put that borrower over the 25 item limit or if they both attempted to add
the same item.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&#34;consistent&#34;&gt;Consistent&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Naming.&lt;/li&gt;
&lt;li&gt;Uniformity of behavior.&lt;/li&gt;
&lt;li&gt;Error handling.&lt;/li&gt;
&lt;li&gt;Event publishing.&lt;/li&gt;
&lt;li&gt;Documentation.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;clear-aka-intuitive&#34;&gt;Clear (aka Intuitive)&lt;/h4&gt;

&lt;p&gt;Closely related to paper testing.
Proportional to how close your solution is to the true model.
Warning not to overestimate your own intuition (confirmation bias).&lt;/p&gt;

&lt;h3 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;In the &lt;a href=&#34;../use-case-driven-design-3/&#34;&gt;third post&lt;/a&gt; in this series I will delve into the design process,
continuing to use the on-line library service example.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Use-case Driven API Design (part 3)</title>
      <link>http://bisondesign.net/post/use-case-driven-design-3/</link>
      <pubDate>Sat, 07 Apr 2018 20:21:11 -0500</pubDate>
      
      <guid>http://bisondesign.net/post/use-case-driven-design-3/</guid>
      <description>

&lt;h3 id=&#34;use-case-driven-api-design&#34;&gt;Use-case Driven API Design&lt;/h3&gt;

&lt;p&gt;In the &lt;a href=&#34;../use-case-driven-design-2/&#34;&gt;previous post&lt;/a&gt;, I discussed the qualities of a good public API
design. Knowing where we want to go does not automatically tell us how to get
there. Today I wanted to travel from Detroit to Chicago so I got in the car and
opened &lt;a href=&#34;https://www.google.com/maps/dir/Detroit,+Michigan/Chicago,+Illinois&#34;&gt;Google Maps&lt;/a&gt; on my phone. It told me exactly how to get where I
wanted to go. But before 1800 Chicago was much harder to find; there were no
roads, no maps, no directions. Often it feels that way when we embark on the
design of an API that does not yet exist. We are blazing a trail into new
territory. We know the end goal - a clear, complete, compact, consistent API -
and we can recognize it when we see it. But where do we start? We start from
the end of course!&lt;/p&gt;

&lt;p&gt;Requirements for an API must begin as a collection of tasks that the consumers
of the API will accomplish. These should be written down in the language of the
domain. If the person responsible for these requirements is not a subject
matter expert (SME) then please try hard to consult with one. Getting the
language right is crucial at this stage. The language will contain nouns and
verbs that should become part of the final API methods. If you are using
Domain Driven Design (DDD) these will also appear in the implementation.&lt;/p&gt;

&lt;h4 id=&#34;nomenclature-aka-ubiquitous-language&#34;&gt;Nomenclature (aka Ubiquitous Language)&lt;/h4&gt;

&lt;p&gt;Ubiquitous language is simply the language of a particular domain. Your API
should be built on that language. Your object domain model should only include
those domain concepts, the same ones understood and used by users and subject
matter experts. It should not contain concepts related to the technical
implementation of your computing solution.&lt;/p&gt;

&lt;p&gt;For example, a flight reservation model would include nouns like person,
passenger, reservation, scheduled flight, flight description, and airport. It
would also include verbs or verb phrases like add reservation, add passenger,
check space, add scheduled flight, and add airport.&lt;/p&gt;

&lt;p&gt;These terms should be well documented. It is important to understand that the
scope of a language can be fairly narrow. To an enterprise like a telephone
company the term telephone will mean different things in different contexts
(e.g. repair vs billing vs routing). Each domain will have its own dictionary.&lt;/p&gt;

&lt;h4 id=&#34;queries&#34;&gt;Queries&lt;/h4&gt;

&lt;p&gt;The term &amp;lsquo;command query separation&amp;rsquo; (or CQS) was coined by Bertrand Meyer in
his influential book &lt;a href=&#34;https://www.amazon.com/Object-Oriented-Software-Construction-Prentice-Hall-International&#34;&gt;Object-Oriented Software Construction&lt;/a&gt; It states that
every method should either be a command that performs an action, or a query
that returns data to the caller, but not both. Methods that return data should
have no observable side effects (except perhaps drowsiness).&lt;/p&gt;

&lt;p&gt;Adherence to CQS is not necessary for a good API design, but it is helpful to
keep these two types of API separate since they present different challenges to
scalability. For example, in a distributed system the results of queries can be
cached to improve performance at the cost of some staleness. On the other hand,
commands need special handling to avoid race conditions that might lead to data
corruption.&lt;/p&gt;

&lt;p&gt;When designing APIs it is first helpful to rule out &amp;ldquo;reports&amp;rdquo;. Like queries,
reports return data to the caller typically by getting some information from
many database tables and doing some joins. The business is usually pretty lax
about report requirements depending on how they are used. A report may be
generated only for compliance and archived. Or it may be used to look for
anomalies in a historical record of transactions. Typically reports span a
fixed period of time. Most importantly, reports rarely interact with the domain
model of the system, being generated instead from the data store. It is this
that allows us to ignore reports when designing an API for the domain.&lt;/p&gt;

&lt;p&gt;By contrast data that is presented to the user in a user interface is intended
for immediate action. It represents the current status of the domain and so it
must aspire to higher standards of &amp;ldquo;freshness&amp;rdquo;. Still, the business should be
willing to provide guidance on how stale a piece of data in the UI can be
allowed to get. Freshness is useful to include, along with the data in the UI,
some indication of the staleness of that data to inform the end user (e.g. &amp;ldquo;as
of 10:25:20 on 02/13/18&amp;rdquo; or &amp;ldquo;valid until 9am ET on 04/08/18&amp;rdquo;).&lt;/p&gt;

&lt;p&gt;The key design consideration for a query is that all the data in the result
should come from one subdomain. If the query must aggregate information from
other subdomains then it will be slow and inconsistent. This may lead to some
surprising results in the UI.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Example.&lt;/strong&gt; In the online library domain there are several use cases which are
pure queries.  These correspond to listing or giving detailed information for
the following entities:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;branches&lt;/li&gt;
&lt;li&gt;accounts&lt;/li&gt;
&lt;li&gt;items on loan&lt;/li&gt;
&lt;li&gt;reservation requests&lt;/li&gt;
&lt;li&gt;items in the library collection&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The design should keep the data returned by these query API orthogonal.  How
this is accomplished in practice when relationships exist between entities is
by embedding identifiers in the response.  For example, an item on loan is an
item held by a specific account at a specific branch.  These three identifiers
would be part of the data returned.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;A well factored (orthogonal) set of API need not be inefficient. In the
specific case of REST over HTTP, the results of query operations are typically
cached. This is made easier when the allowed staleness of the data is defined.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Example.&lt;/strong&gt; The list of branches or items in a library&amp;rsquo;s collection needn&amp;rsquo;t
be updated more than once a day. Repeated requests that are served from a cache
require no processing on the server end. To aggregate the same information on
the server (requiring no extra code with OData or GraphQL) means that the back
end is responsible, adding more processing, latency, and harming scalability.
Magic is never cheap.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;commands&#34;&gt;Commands&lt;/h3&gt;

&lt;p&gt;An API call with side effects is called a &lt;code&gt;command&lt;/code&gt;. Commands should be
designed not to fail to the maximum extent possible. Ideally a command provides
no response, not even a success or failure status, allowing it to be handled
asynchronously. This advice requires some justification.&lt;/p&gt;

&lt;p&gt;When a command fails it can usually fail in many different ways:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;the command request could not be properly interpreted&lt;/li&gt;
&lt;li&gt;the agent issuing the command may not have permission&lt;/li&gt;
&lt;li&gt;the server hosting target resource may be unavailable&lt;/li&gt;
&lt;li&gt;the target resource itself may have been deleted&lt;/li&gt;
&lt;li&gt;the target resource state may have changed in an incompatible way&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We can group all failures into one of four categories:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;good request; temporary unavailability of the target&lt;/li&gt;
&lt;li&gt;good request; permanent unavailability of the target&lt;/li&gt;
&lt;li&gt;bad request; client side coding error (bad use of the API)&lt;/li&gt;
&lt;li&gt;bad request; invalid state (user error, race condition, etc)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Some of these require a retry, some will fail no matter how many times a retry
is attempted. Some require a client side code change, and some require the user
to fix and try again.&lt;/p&gt;

&lt;p&gt;A well designed system will understand the classification of the failure and
automatically handle all of these on behalf of the client, when possible. For
example, a retry can be attempted if a resource is not available. This too may
eventually fail. In some cases there is nothing that can be done on the client
side. The client code cannot fix itself for example (well not yet). In all
cases when recovery from a failure cannot be done, the user will need to be
informed, but no client side code need be written to handle that other than
reloading the current state of client side objects from the server.&lt;/p&gt;

&lt;p&gt;Informing the user of a failure, if done asynchronously, will allow the client
to be more responsive. The client code should be designed with this in mind: do
not assume success of your commands but wait for notification (via a domain
event) that your command succeeded. In a distributed multi-user system clients
should be notified of changes done by other users via domain events anyway.&lt;/p&gt;

&lt;p&gt;Subdomains were important for keeping queries fast. They are equally important
for avoiding race conditions in commands. Subdomains define the transactional
boundaries of the data. There are two important rules to follow:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;A single command may change data only in one subdomain.&lt;/li&gt;
&lt;li&gt;A command must be atomic: all changes or none must be committed.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This suggests that the design of domains and subdomains follows the use cases
since use cases identify all the data which must be changed. We should keep the
subdomains small. Surprisingly this advice will break the data of one entity
across subdomain boundaries. For example in Amazon the price of an item for
sale and the description of the item are in different domains.&lt;/p&gt;

&lt;p&gt;When business rules require changes to data in multiple subdomains this can still
be accomplished by commands that work in unison within the domain. For example
if the availability of rooms on a particular night in a hotel affects the room
price, then the price subdomain must listen to room booked events from the room
booking subdomain and adjust prices accordingly.&lt;/p&gt;

&lt;p&gt;Finally, long lived workflows that involve commands from multiple domains can
be implemented as &lt;a href=&#34;https://www.cs.cornell.edu/andru/cs711/2002fa/reading/sagas.pdf&#34; title=&#34;Original paper by Hector Garcia-Molina&#34;&gt;sagas&lt;/a&gt;. Sagas are an improvement on two phase commit.
Sagas support the notion of getting distributed agreement of a process (with
reduced guarantees). In case of failures, all involved domains that
successfully executed their commands perform compensating commands. If you want
to use sagas then for every command also define an idempotent compensating
command. Sagas are very cool but their discussion is beyond the scope of this
post.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Example.&lt;/strong&gt; In the online library domain there are several use cases which are
commands.  These correspond to creating, deleting, or updating the following
entities:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;add, delete, or edit account&lt;/li&gt;
&lt;li&gt;renew items on loan&lt;/li&gt;
&lt;li&gt;create or cancel reservation requests&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Branches and items held by a branch are not mutable via the API, simplifying
the implementation.  Branches are specified in a configuration file while the
collection of their items (e.g. books) is maintained in an external system.  The
renewal of an item or the creation of a reservation request can fail due to
race conditions with other users.  The success of any mutation command is
reported via a domain event.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;When a command fails (which should be rare) the user instigating the command
can be notified, either in the UI via a notification area, or by email.&lt;/p&gt;

&lt;h3 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;In the next post I will show an API design for the online library system we
have been discussing, starting from the use cases.  I will discuss testing the
API and then conclude with some thoughts about how the use case driven approach
applies to REST API design.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>