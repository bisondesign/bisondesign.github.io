<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Bison Design</title>
    <link>http://bisondesign.net/post/index.xml</link>
    <description>Recent content in Posts on Bison Design</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>All rights reserved - 2017</copyright>
    <lastBuildDate>Wed, 07 Jun 2017 20:21:11 -0500</lastBuildDate>
    <atom:link href="http://bisondesign.net/post/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>SOLID Web UI Components</title>
      <link>http://bisondesign.net/post/solid-UI-components/</link>
      <pubDate>Wed, 07 Jun 2017 20:21:11 -0500</pubDate>
      
      <guid>http://bisondesign.net/post/solid-UI-components/</guid>
      <description>

&lt;h3 id=&#34;introduction&#34;&gt;Introduction&lt;/h3&gt;

&lt;p&gt;The five fundamental principles of Object Oriented Design known by the acronym
SOLID are well known in the software community (&lt;a href=&#34;https://en.wikipedia.org/wiki/SOLID_(object-oriented_design)&#34;&gt;SOLID&lt;/a&gt;). Originally
expressed by Robert C. Martin, these principles will allow a system to be more
easily maintained and extended over time. A side effect of these principles is
that the resulting system is loosely coupled.&lt;/p&gt;

&lt;p&gt;Similar principles would help the maintainability and evolution of complex UI
components in a multi vendor environment. Components are part of the view of an
MV* framework. The job of the view is to expose the model in the UI. The use of
composition in UI component design supports rapid development. It is one of the
many benefits obtained from using UI frameworks with existing libraries of
components. However the direct use of simpler components in a composite
component can lead to tight coupling and fragility. Also, the desire to reuse
components that are close but not a perfect match for requirements can lead to
the copying of those components, making upgrades difficult.&lt;/p&gt;

&lt;p&gt;SOLID Web UI design patterns would address these issues.&lt;/p&gt;

&lt;h3 id=&#34;solid-in-ui-component-design&#34;&gt;SOLID in UI Component Design&lt;/h3&gt;

&lt;p&gt;Here are five principles whose initials form the acronym SOLID.  Each
has its own acronym as well.&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Initial&lt;/th&gt;
&lt;th&gt;Acronym&lt;/th&gt;
&lt;th&gt;Concept&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;S&lt;/td&gt;
&lt;td&gt;SRP&lt;/td&gt;
&lt;td&gt;Single responsibility principle&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;O&lt;/td&gt;
&lt;td&gt;OCP&lt;/td&gt;
&lt;td&gt;Open/closed principle&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;L&lt;/td&gt;
&lt;td&gt;LSP&lt;/td&gt;
&lt;td&gt;Liskov substitution principle&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;I&lt;/td&gt;
&lt;td&gt;ISP&lt;/td&gt;
&lt;td&gt;Interface segregation principle&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;D&lt;/td&gt;
&lt;td&gt;DIP&lt;/td&gt;
&lt;td&gt;Dependency inversion principle&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;The argument from object oriented design is meant as an analogy. Still many of
the same principles apply to UI components. Just like complex classes are built
up from simpler classes, complex components can be built from simpler ones.
While &lt;a href=&#34;http://patternlab.io/&#34;&gt;atomic&lt;/a&gt; approaches to UI design are not new, they have different
goals.  Decomposition is a response to complexity.  SOLID design is a response
to fragility in the face of change; it builds on decomposition.&lt;/p&gt;

&lt;p&gt;The first three SOLID principles moderate the behavior of components and their
extensions.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Single responsibility principle.&lt;/strong&gt; Components that take responsibility for
more than one thing can end up doing nothing well (explaining why there aren&amp;rsquo;t
that many successful brain surgeon barbers). Complex UI&amp;rsquo;s should be built up
from simple components by composition.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;Open for extension but closed for modification.&lt;/strong&gt; Once released, vendors
must never modify a component&amp;rsquo;s behavior (contract). For the sake of reuse
components must also support extension.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;Liskov substitution Principle.&lt;/strong&gt; Components should support extensions.
Extension developers must ensure that the extended object still satisfies the
behavior contract of the base. If not the extension will seem buggy.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The last two SOLID principles support reuse through abstraction. Abstraction is
indirection based on type. Unlike objects, which have one interface, components
have two interfaces. The type of data that can be bound to a component and the
binding behavior (e.g. one-way vs two-way) supported by the component define
its model-facing interface. The configuration of the component, its supported
events, and the view contexts in which it can be used define its view-facing
interface. In theory a component could be replaced by any other that supports
the same two interfaces.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Interface segregation principle.&lt;/strong&gt; If vendors combine simple components into
more complex components then the “interfaces” that define the bindings should
be factored. Broad interfaces are a pain to implement if all you need is a
narrow one. Customizers will be forced to create facades to bind to instead
of binding to the model directly.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;Dependency inversion principle.&lt;/strong&gt; Composition is a great way of building up
complexity. Dependency inversion means identifying dependencies with interfaces and
satisfying them only at run time (referred to as &amp;lsquo;wiring&amp;rsquo; the entity). The&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;solid-ui-component-use-case&#34;&gt;SOLID UI Component Use Case&lt;/h3&gt;

&lt;p&gt;Frameworks like Angular, Aurelia, and React use components to support the
creation of Web UIs. HTML 5 supports the creation of Web Components natively.
So why do we need the five SOLID patterns to govern our use of web components?
In most cases they are &lt;em&gt;not&lt;/em&gt; needed since most Web UIs are small and static.&lt;/p&gt;

&lt;p&gt;The disciplined approach is needed when a library of components is created
by a vendor and reused at scale by the customers of that vendor. The same is
true when the vendor is one department of an organization creating a library to
be used by other departments. In both of these cases updating the library must
be seamless, from the point of view of the &amp;ldquo;customers&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;This is where SOLID shines.  These principles allow maximum reuse with minimal
coupling between the components as a means to productivity and robustness.&lt;/p&gt;

&lt;p&gt;Reuse comes in two flavors. The first type is akin to &amp;ldquo;inheritance&amp;rdquo; when a
component is extended to add features or modify presentation without breaking
the contract of the base component. In this case the extension can act as a
plug-in replacement for the base.&lt;/p&gt;

&lt;p&gt;Extension can be done with direct references to the base component to keep the
implementation simple. Using explicit references in an extension is pragmatic since
indirection always comes at a price (e.g., cognitive complexity and performance
to name a few).  Extensions are typically done at a lower level, for example
when creating new widgets for a library.&lt;/p&gt;

&lt;p&gt;The second type of reuse is when simpler components are combined into more
complex components. This is a more typical scenario done at a higher level when
pages or mashups are being designed. In this scenario the references to the
inner components should remain abstract allowing the wiring to a concrete
component to be done on initialization. The decision can vary by context and
configuration and even by data type.  So for example, a table of items in a
shopping cart can choose a &amp;ldquo;template&amp;rdquo; to instantiate based on the type of item.&lt;/p&gt;

&lt;p&gt;In both case (extension and composition) the bindings of the inner components
to the model are left open to be hooked up dynamically to the model at run
time.  View facing configuration (related to layout) should be hard-coded.&lt;/p&gt;

&lt;h3 id=&#34;implementation&#34;&gt;Implementation&lt;/h3&gt;

&lt;p&gt;The ability to create components is built into HTML 5. &lt;a href=&#34;https://en.wikipedia.org/wiki/Web_Components&#34;&gt;Web Components&lt;/a&gt; are
a group of standards proposed as a W3C specification. They allow you to create
new HTML elements that are reusable, composable, and encapsulated. How do you
write SOLID UI components as HTML 5 web components?&lt;/p&gt;

&lt;p&gt;You will want to start by splitting your components in to modules. When
projects get to a certain size, they will have to deal sooner or later with the
&amp;lsquo;dependency hell&amp;rsquo; problem. This happens when two different versions of the same
library are needed at the same time.&lt;/p&gt;

&lt;p&gt;Binding is always done on the client, as that is where the events are triggered
and consumed.  Static binding is too restrictive as well, as the shopping cart
example showed.&lt;/p&gt;

&lt;p&gt;There are two distinct paths we can pursue for wiring (creating the view tree
with dependency resolution) depending on where it will take place. It can be
done on the client using templates, or it can be done dynamically on the
server as data is added to the model that needs to be displayed in the view. I
prefer a template approach on the client. Templates can be stored in HTML, the
approach chosen by Aurelia.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;template id=&amp;quot;aboutOurTeam&amp;quot;&amp;gt;
  &amp;lt;h1&amp;gt;About&amp;lt;/h1&amp;gt;
  &amp;lt;hr&amp;gt;
  &amp;lt;p class=&amp;quot;lead&amp;quot;&amp;gt;${aboutMessage}&amp;lt;/p&amp;gt;
  &amp;lt;hr&amp;gt;
  &amp;lt;h2&amp;gt;Our Team&amp;lt;/h2&amp;gt;
  &amp;lt;div repeat.for=&amp;quot;p of profiles&amp;quot;&amp;gt;
    &amp;lt;compose model.bind=&amp;quot;p&amp;quot; view-model=&amp;quot;profile&amp;quot;&amp;gt;&amp;lt;/compose&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/template&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here the page &lt;a href=&#34;https://html.spec.whatwg.org/multipage/scripting.html#the-template-element&#34;&gt;template&lt;/a&gt;, given a binding context that includes a &amp;lsquo;profiles&amp;rsquo;
array can loop over the entries of this array and for each include a &amp;lsquo;profile&amp;rsquo;
view model binding it&amp;rsquo;s context to the given entry. The context for the template is
established when it is adopted into the DOM tree of the view.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt; var template = document.querySelector(&#39;#aboutOurTeam&#39;);
 for (var i = 0; i &amp;lt; data.length; i += 1) {
   var cat = data[i];
   var clone = template.content.cloneNode(true);
   var cells = clone.querySelectorAll(&#39;td&#39;);
   // ... establish context and recursively compose children
   template.parentNode.appendChild(clone);
 }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;compose&lt;/code&gt; element in the example above is a &lt;a href=&#34;https://w3c.github.io/webcomponents/spec/custom/&#34;&gt;custom web element&lt;/a&gt;
defined by Aurelia.&lt;/p&gt;

&lt;p&gt;How is this approach SOLID?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;SRP: The &amp;lsquo;AboutOurTeam&amp;rsquo; view model has a single responsibility. Composition
and binding allow the templates themselves to remain simple. Here the focus is
on the headings, message, and the list of team members.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;OCP: Extending a template can be done by means of the &lt;a href=&#34;https://w3c.github.io/webcomponents/spec/shadow/&#34;&gt;Shadow DOM&lt;/a&gt;,
another HTML 5 feature. This allows an element&amp;rsquo;s content to be replaced by
completely encapsulated HTML markup that has access to the original element.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Aside. Suppose you created a widget that contained an &lt;code&gt;h2&lt;/code&gt;, a &lt;code&gt;p&lt;/code&gt; and a text
&lt;code&gt;input&lt;/code&gt; field to allow users to rate the content (the text can be &lt;code&gt;*&lt;/code&gt; to &lt;code&gt;*****&lt;/code&gt;).
Now you wanted to replace the input field with a star rater. It is possible to
shadow the original widget, keeping the &lt;code&gt;h2&lt;/code&gt; and &lt;code&gt;p&lt;/code&gt; visible while displaying a star
rater widget whose value feeds the invisible text field.&lt;/p&gt;
&lt;/blockquote&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;LSP: Careful delegation to the base of an extended component, as in the above
example, ensures that the original contract is honored.  The component interacts
with the user in a different way - its view-facing interface has changed - but it
will still be plug-in compatible with the original widget component.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;ISP: Models are JavaScript objects. They can be decomposed into arrays, maps,
or primitive values (string, number, or boolean). Loops decompose arrays. Name
bindings decompose maps. Finally, primitives can have only a finite set of
semantic types (e.g. number can represent an integer, decimal, money,
percentage, distance, time, etc). These few semantic types make it possible to
support a finite set of primitive interfaces for data binding.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;DIP: The &amp;lsquo;AboutOurTeam&amp;rsquo; view model had a dependency on the &lt;code&gt;profile&lt;/code&gt; view model.
This dependency may resolve to a concrete type (&lt;code&gt;profile.html&lt;/code&gt; and &lt;code&gt;profile.js&lt;/code&gt; in
aurelia).  But you can imagine a system where additional logic was involved in
selecting a view model using additional information about the data instance to be
bound and also the context.  In particular resolution can take into consideration:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Context in the view&lt;/li&gt;
&lt;li&gt;The type of data being bound (e.g. an extension of &lt;code&gt;profile&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;User based configuration&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;missing-details&#34;&gt;Missing Details&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Dynamic Behavior&lt;/strong&gt;. I have not touched on the more dynamic aspects of the UI
such as binding and support for events. Needless to say this alone is a vast
area already well covered by many frameworks. For example a &lt;a href=&#34;http://redux.js.org&#34;&gt;reactive&lt;/a&gt;
approach that eschews binding and relies for events alone would work well. But
other approaches would also work.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Extension&lt;/strong&gt;. The approach given here needs a more concrete description of how
to use the shadow DOM to extend components without modification (OCP). Some
methods to simplify the repetitive aspects of extension and to preserve the
contract of the base (LSP) would be needed as well.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Base Properties&lt;/strong&gt;. All components should derive from a common base class to
supply the view-facing interface. Common properties would include an id, a
name, x, y &amp;amp; z coordinates, width and height, and a boolean for visibility.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Events&lt;/strong&gt;.  Events (e.g., onClick) that are specific to a component type (the
&lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/API/EventTarget&#34;&gt;EventTarget&lt;/a&gt;,
e.g. &lt;code&gt;button&lt;/code&gt;) will be present on all instances of that type. Listeners must
register with the target and implement the event listener interface:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;interface EventListener {
  void handleEvent(in Event evt);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;All the information needed by the listener will be present in the
&lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/API/Event&#34;&gt;Event&lt;/a&gt; object,
including the target object. Event listeners can subscribe to one or more
events. Likewise, one or more listeners can subscribe to any given event
(making it a multi-cast event).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Other Properties&lt;/strong&gt;.  The properties of the base and derived component
share these characteristics:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;they can be bound for reading (if binding is supported)&lt;/li&gt;
&lt;li&gt;they are exposed as attributes of the element&lt;/li&gt;
&lt;li&gt;they are exposed programmatically via setter and getter methods&lt;/li&gt;
&lt;li&gt;they can be tested in css for conditional formatting&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Composition&lt;/strong&gt;. The method by which multiple components are composed into a
compound component should be defined. The interface of the compound component
is the union of the interfaces of the children components that are bindable
from the aggregate.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Dependency Injection&lt;/strong&gt;.  The DIP is already implemented in some systems via
dependency injection.  This is the case with Aurelia for example.  In others
it will require explicit wiring code.  The wiring should check compatibility
of a component with the interface that it must satisfy. Wiring can still be
done manually but the exact mechanism must be explained.&lt;/p&gt;

&lt;h3 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;In this blog I introduced the concept of SOLID Web UI components. I explained
how these five principles borrowed from software design can be applied to
component design and when they should be applied. By following these principles
a custom UI will be less likely to break when the underlying libraries are
upgraded. Finally, I showed how extensibility can be integrated into a UI
component library using some HTML 5 features and existing frameworks.&lt;/p&gt;

&lt;p&gt;In the future I would like to implement &lt;a href=&#34;http://todomvc.com/&#34;&gt;http://todomvc.com/&lt;/a&gt; using
this approach.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>A Metric for Simplicity</title>
      <link>http://bisondesign.net/post/metric-for-simplicity/</link>
      <pubDate>Thu, 01 Jun 2017 00:00:00 +0000</pubDate>
      
      <guid>http://bisondesign.net/post/metric-for-simplicity/</guid>
      <description>

&lt;h3 id=&#34;the-value-of-simplicity&#34;&gt;The value of simplicity&lt;/h3&gt;

&lt;p&gt;The most complex requirement in software development is simplicity. In this post I
will describe a technique for measuring the simplicity of a UI design. This can be
used to choose the simplest design from a selection.&lt;/p&gt;

&lt;p&gt;I recently ran a training exercise in problem solving with an audience of 50
top developers at a large corporation. Technology companies need to
innovate in order to stay ahead of the competition but innovation requires
problem solving.  But before we can solve problems we need to find them. For
example, I never knew that I absolutely &lt;em&gt;had&lt;/em&gt; to have a fingerprint reader on my
phone until my wife got one. Whoever discovered that we all need a fingerprint
reader was a genius.&lt;/p&gt;

&lt;p&gt;The true genious of this invention is that it is so simple; even a
toddler can learn to unlock a phone if the parents are crazy enough to
register his fingerprints on it. Simplification (represented by the meme &amp;ldquo;Less
if More&amp;rdquo;) is part of solution refinement, the often skipped last step in problem
solving.&lt;/p&gt;

&lt;h3 id=&#34;the-meaning-of-simplicity&#34;&gt;The meaning of simplicity&lt;/h3&gt;

&lt;p&gt;Simplicity has different manifestations in different domains. In mathematics it
is often referred to as elegance. An elegant solution is clear, concise, and
surprising. My favorite example is Cantor&amp;rsquo;s demonstration that the real numbers
are uncoutably infinite. Here he explains it to David Hilbert:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://bisondesign.net/images/Diagonal-Proof.png&#34;/&gt;&lt;/p&gt;

&lt;p&gt;If Cantor&amp;rsquo;s proof had been clunky, the result would have been just as
beneficial to mathematicians. A clunky proof woudn&amp;rsquo;t really matter as long as
it was still correct. Still, elegant proofs are a delight to behold, even on
repeated viewing.&lt;/p&gt;

&lt;p&gt;Simplicity in software matters. Your product (whether it&amp;rsquo;s an app or a service)
is not an end in itself but a means to an end. In the UI complexity impedes the
end user from doing his task. In code complexity impedes maintainability. In
software design complexity impedes flexibility. A clunky UI, a clunky design
and a clunky implementation do matter.&lt;/p&gt;

&lt;p&gt;Simplicity in software design which closely resembles elegance in mathematics,
is the subject of a future blog post. Here we will stick with the user
experience and in particular simplicity in the UI.&lt;/p&gt;

&lt;h3 id=&#34;a-model-for-the-interaction-of-a-human-with-the-ui&#34;&gt;A model for the interaction of a human with the UI&lt;/h3&gt;

&lt;p&gt;A milestone in the field of usability in computer systems was the publication
of &amp;ldquo;The Psychology of Human-Computer Interaction&amp;rdquo; by Card, Moran, and Newell
(1983). The authors proposed a model of the &amp;ldquo;Human processor&amp;rdquo; citing ten
scientific principles of operation, like &lt;a href=&#34;https://en.wikipedia.org/wiki/Fitts&#39;s_law&#34; title=&#34;Fitts&#39;s law - Wikipedia&#34;&gt;Fitts&amp;rsquo;s law&lt;/a&gt; and the &lt;a href=&#34;https://en.wikipedia.org/wiki/Power_law_of_practice&#34; title=&#34;Power Law of Practice - Wikipedia&#34;&gt;Power Law
of Practice&lt;/a&gt; based on empirical data.&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;http://bisondesign.net/images/03-HumanProcessor_Card_Moran_Newell_1983.jpg&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;Models are useful for analysis. The suitability of a model can be judged by its
predictive accuracy. Our model of human-computer interaction will be simpler
than the image above which comes from the book, but it will use some of the same
ideas.&lt;/p&gt;

&lt;p&gt;Suppose automated analysis could be added to a UI design tool such as
&lt;a href=&#34;https://balsamiq.com/&#34;&gt;Balamiq Mockups&lt;/a&gt; to help assess the usability of a UI for performing
a specific task at the design stage. Given a task, the UI designer would click,
type and drag to complete the actions needed to complete the task using the
mock, imitating the future user. These would be recorded and analyzed.&lt;/p&gt;

&lt;p&gt;A UI can be designed to accomplish multiple tasks. For example, the same UI may
be used to create an account or change a password: two distinct tasks. In that
case both tasks would be considered in the analysis of the UI. These would not
be given equal weight however. The weight of a task to a given persona will be
proportional to its frequency. For example the number of times that task needs
to be accomplished in a typical year, month or week.&lt;/p&gt;

&lt;p&gt;Being able to accomplish a task is not enough. That&amp;rsquo;s basic suitability
testing. Each interaction with and transition between UI components has a cost.
Clicking on an item that is a big target costs less than if it were small. The
distance the pointer has to move has a cost. Picking an item in a cluttered
menu has a higher cost than clean ones. The sum of the costs is &amp;ldquo;inefficiency&amp;rdquo;.
Our goal will be to minimize inefficiency over the task.&lt;/p&gt;

&lt;p&gt;Simplicity can be measured by the amount of &amp;ldquo;ink&amp;rdquo; or &amp;ldquo;clutter&amp;rdquo; in the UI. Less
is more! In a good UI the quotient of task value, divided by simplicity and
efficiency is the metric by which I will judge the UI.&lt;/p&gt;

&lt;p&gt;The sequence is not necessarily unique.  Sometimes the sequence is constrained,
as when a button is disabled until certain fields are filled in properly.  These
variation can be measured as well.&lt;/p&gt;

&lt;p&gt;This has gotten long enough.  In a future blog post I will discuss:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;the model of human behavior while interacting with a UI&lt;/li&gt;
&lt;li&gt;measuring the cost of learning a UI by repeated performance of the same tasks&lt;/li&gt;
&lt;li&gt;metric limitations, given different users have different experience levels&lt;/li&gt;
&lt;li&gt;use of deep learning to refine the model&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;references&#34;&gt;References&lt;/h3&gt;

&lt;p&gt;[1] Card, Stuart K.; Moran, Thomas P.; Newell, Allen (1983). The Psychology of
Human–Computer Interaction. Hillsdale, NJ: L. Erlbaum Associates. ISBN
0898592437.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Fast Username Validation</title>
      <link>http://bisondesign.net/post/fast-username-validation/</link>
      <pubDate>Tue, 07 Feb 2017 20:21:11 -0500</pubDate>
      
      <guid>http://bisondesign.net/post/fast-username-validation/</guid>
      <description>

&lt;h3 id=&#34;a-good-problem-to-have&#34;&gt;A Good Problem to Have&lt;/h3&gt;

&lt;p&gt;This post describes a novel way to use probabilistic data structures to improve
the user experience of creating a new account.&lt;/p&gt;

&lt;p&gt;You run a site where customers create an account with a user name and password.
Your site is wildly successful and more customers flock to join. Soon all
the good user names are taken. With all your success the fundamental user
experience of creating an account begins to suck.&lt;/p&gt;

&lt;p&gt;Why? The first group of users naturally choose their first name. But there are
4.8 million &lt;em&gt;James&lt;/em&gt; in the United States and almost as many &lt;em&gt;Johns&lt;/em&gt;. The
&lt;a href=&#34;http://names.mongabay.com/male_names.htm&#34;&gt;twenty most common male names&lt;/a&gt;
account for 32 percent of the male population. There are about 4 million
&lt;em&gt;Marys&lt;/em&gt; and 1.6 million &lt;em&gt;Patricias&lt;/em&gt;. Incredibly prospective customers are told,
&lt;em&gt;&amp;ldquo;Sorry, username &amp;lsquo;Maurice&amp;rsquo; is already taken&amp;rdquo;&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;First initial and last name will go a lot further. However, thanks to human
psychology, we again run out of steam sooner than you expect. At my company,
there were three John Lloyds. Some first names just sound better with a
lastname like John and Lloyd. As a parent of five I can attest to thinking a
lot about that.&lt;/p&gt;

&lt;!-- img src=&#34;https://imgs.xkcd.com/comics/baby_names.png&#34;/ --&gt;

&lt;h3 id=&#34;username-validation-requirements&#34;&gt;Username validation requirements&lt;/h3&gt;

&lt;p&gt;By the time you reach 50,000 users (congratulations, by the way) your sucky UI
will require the user to make repeated attempts to find a name that is not
taken. Some frustrated non-customers are giving up; now you need to fix this
problem quickly. For the ideal user experience your account creation UI needs
to be simple and responsive.  It should have these properties:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;A visual queue that the name being typed is not yet taken&lt;/li&gt;
&lt;li&gt;Less than 0.5s latency when checking if a given name is taken&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The visual queue could be a greyed out &amp;ldquo;Submit&amp;rdquo; button whenever the name is
already taken. It could also be a pink background in the user name text input
box. With these improvements, your customers will once again be able to choose
a name easily without the heartbreak of repeated rejections. The low latency
is needed for the impression of a responive UI.&lt;/p&gt;

&lt;table&gt;
   &lt;tr&gt;
      &lt;td&gt;&lt;img src=&#34;http://bisondesign.net/images/NewAccountDialogEmpty.png&#34;/&gt;&lt;/td&gt;
      &lt;td&gt;&lt;img src=&#34;http://bisondesign.net/images/NewAccountMissingPassword.png&#34;/&gt;&lt;/td&gt;
      &lt;td&gt;&lt;img src=&#34;http://bisondesign.net/images/NewAccountReadyToSubmit.png&#34;/&gt;&lt;/td&gt;
   &lt;/tr&gt;
&lt;/table&gt;

&lt;p&gt;The three images above show how a simple dialog can provide feedback for a
taken username, a weak password, and a non-matching confirmation. In all
cases the background is pink when there is a problem.  The submit button
is enabled only once all three problems are eliminated.  Doing all three
checks on the client side leads to a repsonsive and simple user experience.&lt;/p&gt;

&lt;h3 id=&#34;probabilistic-data-structures&#34;&gt;Probabilistic data structures&lt;/h3&gt;

&lt;p&gt;This type of behavior should be done in JavaScript on the browser.
Unfortunately, you can&amp;rsquo;t just download a long list of taken names. Even a
&lt;a href=&#34;https://en.wikipedia.org/wiki/Trie&#34;&gt;trie&lt;/a&gt; of names is too big. A trie can
compress common prefixes but the number of nodes is still proportional to the
number of distinct names in the trie. The sheer number of names appears to make
a client side solution impossible. Unless of course you are willing to trade
off certainty for size.&lt;/p&gt;

&lt;p&gt;Enter a probabilistic data structure called a &lt;a href=&#34;https://en.wikipedia.org/wiki/Bloom_filter&#34;&gt;Bloom
Filter&lt;/a&gt;. Probabilistic algorithms
behave like normal algorithms but have a theoretical chance of being wrong. The
trade off is that they act faster or require less memory to produce the result.&lt;/p&gt;

&lt;p&gt;A Bloom Filter is a probabilistic (unreliable) set. Unlike a trie, a Bloom
Filter can compress both the letters and the number of words in a collection to
an in-memory bit vector. You can&amp;rsquo;t always trust that a true result from testing
set membership is correct, but a simple formula gives staticstical limits on
the number of false positives. Here is how it works.&lt;/p&gt;

&lt;p&gt;Suppose the bit vector has size M, where M is very large. To add user name S to
the filter, compute k hash values ${h_0(S), h_1(S), &amp;hellip;, h_k(S)}$ and set
those bits to 1. The k hash functions should be &lt;em&gt;independent&lt;/em&gt;. The numbers M
and k are selected based on the expected number of names. Checking for the presence
of a name involves calculating the same set of bits and testing it they are set.
If even one of them is not set, then the name could not be present in the fitler.
If, however, they are all set, the name is only likely to be present.&lt;/p&gt;

&lt;p&gt;The space advantage in a Bloom Filter comes from the compactness from the data
structure. A Bloom filter with 1% error and an optimal value of k, requires
only about 9.6 bits (1.2 bytes) per element — regardless of the size of the
elements.  So a site with 50,000 user names would require 64K bytes for a filter.
That&amp;rsquo;s the size of a small (400x600) gif image.&lt;/p&gt;

&lt;p&gt;A word of caution. The theoretical percent error assumes the hash functions are
mutually independent.  It is not that easy to get a family of independent hash
functions, but based on my research the error is not too far off.&lt;/p&gt;

&lt;h3 id=&#34;edge-cases-and-recommendations&#34;&gt;Edge cases and Recommendations&lt;/h3&gt;

&lt;p&gt;There is a delay between the time that the bloom filter is calculated on the
server and when it is used on the client.  Suppose for the sake of argument that
your site has 50,000 names and adds 600 more users every day.  The bloom filter
may be recalculated 6 times a day and republished.&lt;/p&gt;

&lt;p&gt;If a new user happens to pick one if these 100 new user names before they are
added they &lt;em&gt;might&lt;/em&gt; still get a false negative.&lt;/p&gt;

&lt;p&gt;What do you do when a false negative happens? The simplest solution is to blame
latency. The user does not know that we are calculating taken names locally
using a Bloom Filter. The UI could optimistically send the names being typed
(after a 0.5 second pause) on to the server to validate.  If the latency to
your server is small, the additional check will only take an extra second.  If
the name is indeed still not taken, the &amp;ldquo;Submit&amp;rdquo; button can be enabled.  If
it happended to be among the 100 newly added names, that fact is sent to the
client which adds the name to a stoplist of known taken names.  The stoplist
can be uploaded along with the Bloom Filter.&lt;/p&gt;

&lt;p&gt;As you start out your web site all you really need is a stoplist to get the
same user experience. One thousand 20 letter user names is only 20K
un-compressed. Design your UX to scale up to 50 or 100 times as many users and
change the test to use a bloom filter when the download size of the stoplist
get&amp;rsquo;s too big.&lt;/p&gt;

&lt;h3 id=&#34;limitations-and-conclusion&#34;&gt;Limitations and Conclusion&lt;/h3&gt;

&lt;p&gt;Facebook has over 1.8 billion active users. A Bloom Filter solution will not
scale to Facebook proportions. Google has the same &amp;lsquo;problem&amp;rsquo;. In these cases
validation happens on the server and the server suggests a number of untaken
names to the user following certain patterns. Can you think of a way in which
the giant could improve on this?&lt;/p&gt;

&lt;p&gt;Good luck and I hope you enjoyed my first technical blog post. In the future
I will share some code for making fast username validation happen.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Welcome to Bison Design</title>
      <link>http://bisondesign.net/post/bisondesign/</link>
      <pubDate>Mon, 06 Feb 2017 15:31:02 -0500</pubDate>
      
      <guid>http://bisondesign.net/post/bisondesign/</guid>
      <description>&lt;p&gt;Welcome to the Bison Design blog!&lt;/p&gt;

&lt;p&gt;I believe that crafting software is an art. My training in mathematics and
decades of experience developing enterprise software gave me a unique
perspective to appreciate software design. The search for simplicity influenced
my work and this is the subject of my blog.&lt;/p&gt;

&lt;p&gt;I hope the excitement I feel upon finding that simplicity comes across in a way
that is both educational and entertaining. If you find these pages interesting
please share your insights in the comments.&lt;/p&gt;

&lt;hr /&gt;

&lt;blockquote&gt;
&lt;p&gt;I work for &lt;a href=&#34;https://www.ptc.com/&#34;&gt;PTC&lt;/a&gt;, a global provider of
solutions and technology platforms for IoT and AR. I do not speak on behalf of
my employer and my views do not necessarily reflect my employer&amp;rsquo;s views.&lt;/p&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
  </channel>
</rss>